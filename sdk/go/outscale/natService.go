// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type NatService struct {
	pulumi.CustomResourceState

	NatServiceId pulumi.StringOutput           `pulumi:"natServiceId"`
	NetId        pulumi.StringOutput           `pulumi:"netId"`
	PublicIpId   pulumi.StringOutput           `pulumi:"publicIpId"`
	PublicIps    NatServicePublicIpArrayOutput `pulumi:"publicIps"`
	RequestId    pulumi.StringOutput           `pulumi:"requestId"`
	State        pulumi.StringOutput           `pulumi:"state"`
	SubnetId     pulumi.StringOutput           `pulumi:"subnetId"`
	Tags         NatServiceTagArrayOutput      `pulumi:"tags"`
}

// NewNatService registers a new resource with the given unique name, arguments, and options.
func NewNatService(ctx *pulumi.Context,
	name string, args *NatServiceArgs, opts ...pulumi.ResourceOption) (*NatService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicIpId == nil {
		return nil, errors.New("invalid value for required argument 'PublicIpId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatService
	err := ctx.RegisterResource("outscale:index/natService:NatService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatService gets an existing NatService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatServiceState, opts ...pulumi.ResourceOption) (*NatService, error) {
	var resource NatService
	err := ctx.ReadResource("outscale:index/natService:NatService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatService resources.
type natServiceState struct {
	NatServiceId *string              `pulumi:"natServiceId"`
	NetId        *string              `pulumi:"netId"`
	PublicIpId   *string              `pulumi:"publicIpId"`
	PublicIps    []NatServicePublicIp `pulumi:"publicIps"`
	RequestId    *string              `pulumi:"requestId"`
	State        *string              `pulumi:"state"`
	SubnetId     *string              `pulumi:"subnetId"`
	Tags         []NatServiceTag      `pulumi:"tags"`
}

type NatServiceState struct {
	NatServiceId pulumi.StringPtrInput
	NetId        pulumi.StringPtrInput
	PublicIpId   pulumi.StringPtrInput
	PublicIps    NatServicePublicIpArrayInput
	RequestId    pulumi.StringPtrInput
	State        pulumi.StringPtrInput
	SubnetId     pulumi.StringPtrInput
	Tags         NatServiceTagArrayInput
}

func (NatServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*natServiceState)(nil)).Elem()
}

type natServiceArgs struct {
	PublicIpId string          `pulumi:"publicIpId"`
	SubnetId   string          `pulumi:"subnetId"`
	Tags       []NatServiceTag `pulumi:"tags"`
}

// The set of arguments for constructing a NatService resource.
type NatServiceArgs struct {
	PublicIpId pulumi.StringInput
	SubnetId   pulumi.StringInput
	Tags       NatServiceTagArrayInput
}

func (NatServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natServiceArgs)(nil)).Elem()
}

type NatServiceInput interface {
	pulumi.Input

	ToNatServiceOutput() NatServiceOutput
	ToNatServiceOutputWithContext(ctx context.Context) NatServiceOutput
}

func (*NatService) ElementType() reflect.Type {
	return reflect.TypeOf((**NatService)(nil)).Elem()
}

func (i *NatService) ToNatServiceOutput() NatServiceOutput {
	return i.ToNatServiceOutputWithContext(context.Background())
}

func (i *NatService) ToNatServiceOutputWithContext(ctx context.Context) NatServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatServiceOutput)
}

func (i *NatService) ToOutput(ctx context.Context) pulumix.Output[*NatService] {
	return pulumix.Output[*NatService]{
		OutputState: i.ToNatServiceOutputWithContext(ctx).OutputState,
	}
}

// NatServiceArrayInput is an input type that accepts NatServiceArray and NatServiceArrayOutput values.
// You can construct a concrete instance of `NatServiceArrayInput` via:
//
//	NatServiceArray{ NatServiceArgs{...} }
type NatServiceArrayInput interface {
	pulumi.Input

	ToNatServiceArrayOutput() NatServiceArrayOutput
	ToNatServiceArrayOutputWithContext(context.Context) NatServiceArrayOutput
}

type NatServiceArray []NatServiceInput

func (NatServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatService)(nil)).Elem()
}

func (i NatServiceArray) ToNatServiceArrayOutput() NatServiceArrayOutput {
	return i.ToNatServiceArrayOutputWithContext(context.Background())
}

func (i NatServiceArray) ToNatServiceArrayOutputWithContext(ctx context.Context) NatServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatServiceArrayOutput)
}

func (i NatServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]*NatService] {
	return pulumix.Output[[]*NatService]{
		OutputState: i.ToNatServiceArrayOutputWithContext(ctx).OutputState,
	}
}

// NatServiceMapInput is an input type that accepts NatServiceMap and NatServiceMapOutput values.
// You can construct a concrete instance of `NatServiceMapInput` via:
//
//	NatServiceMap{ "key": NatServiceArgs{...} }
type NatServiceMapInput interface {
	pulumi.Input

	ToNatServiceMapOutput() NatServiceMapOutput
	ToNatServiceMapOutputWithContext(context.Context) NatServiceMapOutput
}

type NatServiceMap map[string]NatServiceInput

func (NatServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatService)(nil)).Elem()
}

func (i NatServiceMap) ToNatServiceMapOutput() NatServiceMapOutput {
	return i.ToNatServiceMapOutputWithContext(context.Background())
}

func (i NatServiceMap) ToNatServiceMapOutputWithContext(ctx context.Context) NatServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatServiceMapOutput)
}

func (i NatServiceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NatService] {
	return pulumix.Output[map[string]*NatService]{
		OutputState: i.ToNatServiceMapOutputWithContext(ctx).OutputState,
	}
}

type NatServiceOutput struct{ *pulumi.OutputState }

func (NatServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatService)(nil)).Elem()
}

func (o NatServiceOutput) ToNatServiceOutput() NatServiceOutput {
	return o
}

func (o NatServiceOutput) ToNatServiceOutputWithContext(ctx context.Context) NatServiceOutput {
	return o
}

func (o NatServiceOutput) ToOutput(ctx context.Context) pulumix.Output[*NatService] {
	return pulumix.Output[*NatService]{
		OutputState: o.OutputState,
	}
}

func (o NatServiceOutput) NatServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.NatServiceId }).(pulumi.StringOutput)
}

func (o NatServiceOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o NatServiceOutput) PublicIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.PublicIpId }).(pulumi.StringOutput)
}

func (o NatServiceOutput) PublicIps() NatServicePublicIpArrayOutput {
	return o.ApplyT(func(v *NatService) NatServicePublicIpArrayOutput { return v.PublicIps }).(NatServicePublicIpArrayOutput)
}

func (o NatServiceOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o NatServiceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o NatServiceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o NatServiceOutput) Tags() NatServiceTagArrayOutput {
	return o.ApplyT(func(v *NatService) NatServiceTagArrayOutput { return v.Tags }).(NatServiceTagArrayOutput)
}

type NatServiceArrayOutput struct{ *pulumi.OutputState }

func (NatServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatService)(nil)).Elem()
}

func (o NatServiceArrayOutput) ToNatServiceArrayOutput() NatServiceArrayOutput {
	return o
}

func (o NatServiceArrayOutput) ToNatServiceArrayOutputWithContext(ctx context.Context) NatServiceArrayOutput {
	return o
}

func (o NatServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NatService] {
	return pulumix.Output[[]*NatService]{
		OutputState: o.OutputState,
	}
}

func (o NatServiceArrayOutput) Index(i pulumi.IntInput) NatServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatService {
		return vs[0].([]*NatService)[vs[1].(int)]
	}).(NatServiceOutput)
}

type NatServiceMapOutput struct{ *pulumi.OutputState }

func (NatServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatService)(nil)).Elem()
}

func (o NatServiceMapOutput) ToNatServiceMapOutput() NatServiceMapOutput {
	return o
}

func (o NatServiceMapOutput) ToNatServiceMapOutputWithContext(ctx context.Context) NatServiceMapOutput {
	return o
}

func (o NatServiceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NatService] {
	return pulumix.Output[map[string]*NatService]{
		OutputState: o.OutputState,
	}
}

func (o NatServiceMapOutput) MapIndex(k pulumi.StringInput) NatServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatService {
		return vs[0].(map[string]*NatService)[vs[1].(string)]
	}).(NatServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatServiceInput)(nil)).Elem(), &NatService{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatServiceArrayInput)(nil)).Elem(), NatServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatServiceMapInput)(nil)).Elem(), NatServiceMap{})
	pulumi.RegisterOutputType(NatServiceOutput{})
	pulumi.RegisterOutputType(NatServiceArrayOutput{})
	pulumi.RegisterOutputType(NatServiceMapOutput{})
}
