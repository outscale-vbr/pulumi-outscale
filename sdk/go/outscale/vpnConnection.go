// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VpnConnection struct {
	pulumi.CustomResourceState

	ClientGatewayConfiguration pulumi.StringOutput                  `pulumi:"clientGatewayConfiguration"`
	ClientGatewayId            pulumi.StringOutput                  `pulumi:"clientGatewayId"`
	ConnectionType             pulumi.StringOutput                  `pulumi:"connectionType"`
	RequestId                  pulumi.StringOutput                  `pulumi:"requestId"`
	Routes                     VpnConnectionRouteTypeArrayOutput    `pulumi:"routes"`
	State                      pulumi.StringOutput                  `pulumi:"state"`
	StaticRoutesOnly           pulumi.BoolPtrOutput                 `pulumi:"staticRoutesOnly"`
	Tags                       VpnConnectionTagArrayOutput          `pulumi:"tags"`
	VgwTelemetries             VpnConnectionVgwTelemetryArrayOutput `pulumi:"vgwTelemetries"`
	VirtualGatewayId           pulumi.StringOutput                  `pulumi:"virtualGatewayId"`
	VpnConnectionId            pulumi.StringOutput                  `pulumi:"vpnConnectionId"`
}

// NewVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewVpnConnection(ctx *pulumi.Context,
	name string, args *VpnConnectionArgs, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'ClientGatewayId'")
	}
	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.VirtualGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnConnection
	err := ctx.RegisterResource("outscale:index/vpnConnection:VpnConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnConnection gets an existing VpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnConnectionState, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	var resource VpnConnection
	err := ctx.ReadResource("outscale:index/vpnConnection:VpnConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnConnection resources.
type vpnConnectionState struct {
	ClientGatewayConfiguration *string                     `pulumi:"clientGatewayConfiguration"`
	ClientGatewayId            *string                     `pulumi:"clientGatewayId"`
	ConnectionType             *string                     `pulumi:"connectionType"`
	RequestId                  *string                     `pulumi:"requestId"`
	Routes                     []VpnConnectionRouteType    `pulumi:"routes"`
	State                      *string                     `pulumi:"state"`
	StaticRoutesOnly           *bool                       `pulumi:"staticRoutesOnly"`
	Tags                       []VpnConnectionTag          `pulumi:"tags"`
	VgwTelemetries             []VpnConnectionVgwTelemetry `pulumi:"vgwTelemetries"`
	VirtualGatewayId           *string                     `pulumi:"virtualGatewayId"`
	VpnConnectionId            *string                     `pulumi:"vpnConnectionId"`
}

type VpnConnectionState struct {
	ClientGatewayConfiguration pulumi.StringPtrInput
	ClientGatewayId            pulumi.StringPtrInput
	ConnectionType             pulumi.StringPtrInput
	RequestId                  pulumi.StringPtrInput
	Routes                     VpnConnectionRouteTypeArrayInput
	State                      pulumi.StringPtrInput
	StaticRoutesOnly           pulumi.BoolPtrInput
	Tags                       VpnConnectionTagArrayInput
	VgwTelemetries             VpnConnectionVgwTelemetryArrayInput
	VirtualGatewayId           pulumi.StringPtrInput
	VpnConnectionId            pulumi.StringPtrInput
}

func (VpnConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionState)(nil)).Elem()
}

type vpnConnectionArgs struct {
	ClientGatewayId  string             `pulumi:"clientGatewayId"`
	ConnectionType   string             `pulumi:"connectionType"`
	StaticRoutesOnly *bool              `pulumi:"staticRoutesOnly"`
	Tags             []VpnConnectionTag `pulumi:"tags"`
	VirtualGatewayId string             `pulumi:"virtualGatewayId"`
}

// The set of arguments for constructing a VpnConnection resource.
type VpnConnectionArgs struct {
	ClientGatewayId  pulumi.StringInput
	ConnectionType   pulumi.StringInput
	StaticRoutesOnly pulumi.BoolPtrInput
	Tags             VpnConnectionTagArrayInput
	VirtualGatewayId pulumi.StringInput
}

func (VpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionArgs)(nil)).Elem()
}

type VpnConnectionInput interface {
	pulumi.Input

	ToVpnConnectionOutput() VpnConnectionOutput
	ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput
}

func (*VpnConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (i *VpnConnection) ToVpnConnectionOutput() VpnConnectionOutput {
	return i.ToVpnConnectionOutputWithContext(context.Background())
}

func (i *VpnConnection) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionOutput)
}

func (i *VpnConnection) ToOutput(ctx context.Context) pulumix.Output[*VpnConnection] {
	return pulumix.Output[*VpnConnection]{
		OutputState: i.ToVpnConnectionOutputWithContext(ctx).OutputState,
	}
}

// VpnConnectionArrayInput is an input type that accepts VpnConnectionArray and VpnConnectionArrayOutput values.
// You can construct a concrete instance of `VpnConnectionArrayInput` via:
//
//	VpnConnectionArray{ VpnConnectionArgs{...} }
type VpnConnectionArrayInput interface {
	pulumi.Input

	ToVpnConnectionArrayOutput() VpnConnectionArrayOutput
	ToVpnConnectionArrayOutputWithContext(context.Context) VpnConnectionArrayOutput
}

type VpnConnectionArray []VpnConnectionInput

func (VpnConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return i.ToVpnConnectionArrayOutputWithContext(context.Background())
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionArrayOutput)
}

func (i VpnConnectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpnConnection] {
	return pulumix.Output[[]*VpnConnection]{
		OutputState: i.ToVpnConnectionArrayOutputWithContext(ctx).OutputState,
	}
}

// VpnConnectionMapInput is an input type that accepts VpnConnectionMap and VpnConnectionMapOutput values.
// You can construct a concrete instance of `VpnConnectionMapInput` via:
//
//	VpnConnectionMap{ "key": VpnConnectionArgs{...} }
type VpnConnectionMapInput interface {
	pulumi.Input

	ToVpnConnectionMapOutput() VpnConnectionMapOutput
	ToVpnConnectionMapOutputWithContext(context.Context) VpnConnectionMapOutput
}

type VpnConnectionMap map[string]VpnConnectionInput

func (VpnConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionMap) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return i.ToVpnConnectionMapOutputWithContext(context.Background())
}

func (i VpnConnectionMap) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionMapOutput)
}

func (i VpnConnectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnConnection] {
	return pulumix.Output[map[string]*VpnConnection]{
		OutputState: i.ToVpnConnectionMapOutputWithContext(ctx).OutputState,
	}
}

type VpnConnectionOutput struct{ *pulumi.OutputState }

func (VpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (o VpnConnectionOutput) ToVpnConnectionOutput() VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*VpnConnection] {
	return pulumix.Output[*VpnConnection]{
		OutputState: o.OutputState,
	}
}

func (o VpnConnectionOutput) ClientGatewayConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.ClientGatewayConfiguration }).(pulumi.StringOutput)
}

func (o VpnConnectionOutput) ClientGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.ClientGatewayId }).(pulumi.StringOutput)
}

func (o VpnConnectionOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

func (o VpnConnectionOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o VpnConnectionOutput) Routes() VpnConnectionRouteTypeArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionRouteTypeArrayOutput { return v.Routes }).(VpnConnectionRouteTypeArrayOutput)
}

func (o VpnConnectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o VpnConnectionOutput) StaticRoutesOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolPtrOutput { return v.StaticRoutesOnly }).(pulumi.BoolPtrOutput)
}

func (o VpnConnectionOutput) Tags() VpnConnectionTagArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionTagArrayOutput { return v.Tags }).(VpnConnectionTagArrayOutput)
}

func (o VpnConnectionOutput) VgwTelemetries() VpnConnectionVgwTelemetryArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionVgwTelemetryArrayOutput { return v.VgwTelemetries }).(VpnConnectionVgwTelemetryArrayOutput)
}

func (o VpnConnectionOutput) VirtualGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.VirtualGatewayId }).(pulumi.StringOutput)
}

func (o VpnConnectionOutput) VpnConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.VpnConnectionId }).(pulumi.StringOutput)
}

type VpnConnectionArrayOutput struct{ *pulumi.OutputState }

func (VpnConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpnConnection] {
	return pulumix.Output[[]*VpnConnection]{
		OutputState: o.OutputState,
	}
}

func (o VpnConnectionArrayOutput) Index(i pulumi.IntInput) VpnConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].([]*VpnConnection)[vs[1].(int)]
	}).(VpnConnectionOutput)
}

type VpnConnectionMapOutput struct{ *pulumi.OutputState }

func (VpnConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnConnection] {
	return pulumix.Output[map[string]*VpnConnection]{
		OutputState: o.OutputState,
	}
}

func (o VpnConnectionMapOutput) MapIndex(k pulumi.StringInput) VpnConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].(map[string]*VpnConnection)[vs[1].(string)]
	}).(VpnConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionInput)(nil)).Elem(), &VpnConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionArrayInput)(nil)).Elem(), VpnConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionMapInput)(nil)).Elem(), VpnConnectionMap{})
	pulumi.RegisterOutputType(VpnConnectionOutput{})
	pulumi.RegisterOutputType(VpnConnectionArrayOutput{})
	pulumi.RegisterOutputType(VpnConnectionMapOutput{})
}
