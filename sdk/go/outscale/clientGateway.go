// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type ClientGateway struct {
	pulumi.CustomResourceState

	BgpAsn          pulumi.IntOutput            `pulumi:"bgpAsn"`
	ClientGatewayId pulumi.StringOutput         `pulumi:"clientGatewayId"`
	ConnectionType  pulumi.StringOutput         `pulumi:"connectionType"`
	PublicIp        pulumi.StringOutput         `pulumi:"publicIp"`
	RequestId       pulumi.StringOutput         `pulumi:"requestId"`
	State           pulumi.StringOutput         `pulumi:"state"`
	Tags            ClientGatewayTagArrayOutput `pulumi:"tags"`
}

// NewClientGateway registers a new resource with the given unique name, arguments, and options.
func NewClientGateway(ctx *pulumi.Context,
	name string, args *ClientGatewayArgs, opts ...pulumi.ResourceOption) (*ClientGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BgpAsn == nil {
		return nil, errors.New("invalid value for required argument 'BgpAsn'")
	}
	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.PublicIp == nil {
		return nil, errors.New("invalid value for required argument 'PublicIp'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClientGateway
	err := ctx.RegisterResource("outscale:index/clientGateway:ClientGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientGateway gets an existing ClientGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientGatewayState, opts ...pulumi.ResourceOption) (*ClientGateway, error) {
	var resource ClientGateway
	err := ctx.ReadResource("outscale:index/clientGateway:ClientGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientGateway resources.
type clientGatewayState struct {
	BgpAsn          *int               `pulumi:"bgpAsn"`
	ClientGatewayId *string            `pulumi:"clientGatewayId"`
	ConnectionType  *string            `pulumi:"connectionType"`
	PublicIp        *string            `pulumi:"publicIp"`
	RequestId       *string            `pulumi:"requestId"`
	State           *string            `pulumi:"state"`
	Tags            []ClientGatewayTag `pulumi:"tags"`
}

type ClientGatewayState struct {
	BgpAsn          pulumi.IntPtrInput
	ClientGatewayId pulumi.StringPtrInput
	ConnectionType  pulumi.StringPtrInput
	PublicIp        pulumi.StringPtrInput
	RequestId       pulumi.StringPtrInput
	State           pulumi.StringPtrInput
	Tags            ClientGatewayTagArrayInput
}

func (ClientGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientGatewayState)(nil)).Elem()
}

type clientGatewayArgs struct {
	BgpAsn         int                `pulumi:"bgpAsn"`
	ConnectionType string             `pulumi:"connectionType"`
	PublicIp       string             `pulumi:"publicIp"`
	Tags           []ClientGatewayTag `pulumi:"tags"`
}

// The set of arguments for constructing a ClientGateway resource.
type ClientGatewayArgs struct {
	BgpAsn         pulumi.IntInput
	ConnectionType pulumi.StringInput
	PublicIp       pulumi.StringInput
	Tags           ClientGatewayTagArrayInput
}

func (ClientGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientGatewayArgs)(nil)).Elem()
}

type ClientGatewayInput interface {
	pulumi.Input

	ToClientGatewayOutput() ClientGatewayOutput
	ToClientGatewayOutputWithContext(ctx context.Context) ClientGatewayOutput
}

func (*ClientGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientGateway)(nil)).Elem()
}

func (i *ClientGateway) ToClientGatewayOutput() ClientGatewayOutput {
	return i.ToClientGatewayOutputWithContext(context.Background())
}

func (i *ClientGateway) ToClientGatewayOutputWithContext(ctx context.Context) ClientGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientGatewayOutput)
}

func (i *ClientGateway) ToOutput(ctx context.Context) pulumix.Output[*ClientGateway] {
	return pulumix.Output[*ClientGateway]{
		OutputState: i.ToClientGatewayOutputWithContext(ctx).OutputState,
	}
}

// ClientGatewayArrayInput is an input type that accepts ClientGatewayArray and ClientGatewayArrayOutput values.
// You can construct a concrete instance of `ClientGatewayArrayInput` via:
//
//	ClientGatewayArray{ ClientGatewayArgs{...} }
type ClientGatewayArrayInput interface {
	pulumi.Input

	ToClientGatewayArrayOutput() ClientGatewayArrayOutput
	ToClientGatewayArrayOutputWithContext(context.Context) ClientGatewayArrayOutput
}

type ClientGatewayArray []ClientGatewayInput

func (ClientGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientGateway)(nil)).Elem()
}

func (i ClientGatewayArray) ToClientGatewayArrayOutput() ClientGatewayArrayOutput {
	return i.ToClientGatewayArrayOutputWithContext(context.Background())
}

func (i ClientGatewayArray) ToClientGatewayArrayOutputWithContext(ctx context.Context) ClientGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientGatewayArrayOutput)
}

func (i ClientGatewayArray) ToOutput(ctx context.Context) pulumix.Output[[]*ClientGateway] {
	return pulumix.Output[[]*ClientGateway]{
		OutputState: i.ToClientGatewayArrayOutputWithContext(ctx).OutputState,
	}
}

// ClientGatewayMapInput is an input type that accepts ClientGatewayMap and ClientGatewayMapOutput values.
// You can construct a concrete instance of `ClientGatewayMapInput` via:
//
//	ClientGatewayMap{ "key": ClientGatewayArgs{...} }
type ClientGatewayMapInput interface {
	pulumi.Input

	ToClientGatewayMapOutput() ClientGatewayMapOutput
	ToClientGatewayMapOutputWithContext(context.Context) ClientGatewayMapOutput
}

type ClientGatewayMap map[string]ClientGatewayInput

func (ClientGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientGateway)(nil)).Elem()
}

func (i ClientGatewayMap) ToClientGatewayMapOutput() ClientGatewayMapOutput {
	return i.ToClientGatewayMapOutputWithContext(context.Background())
}

func (i ClientGatewayMap) ToClientGatewayMapOutputWithContext(ctx context.Context) ClientGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientGatewayMapOutput)
}

func (i ClientGatewayMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ClientGateway] {
	return pulumix.Output[map[string]*ClientGateway]{
		OutputState: i.ToClientGatewayMapOutputWithContext(ctx).OutputState,
	}
}

type ClientGatewayOutput struct{ *pulumi.OutputState }

func (ClientGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientGateway)(nil)).Elem()
}

func (o ClientGatewayOutput) ToClientGatewayOutput() ClientGatewayOutput {
	return o
}

func (o ClientGatewayOutput) ToClientGatewayOutputWithContext(ctx context.Context) ClientGatewayOutput {
	return o
}

func (o ClientGatewayOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientGateway] {
	return pulumix.Output[*ClientGateway]{
		OutputState: o.OutputState,
	}
}

func (o ClientGatewayOutput) BgpAsn() pulumi.IntOutput {
	return o.ApplyT(func(v *ClientGateway) pulumi.IntOutput { return v.BgpAsn }).(pulumi.IntOutput)
}

func (o ClientGatewayOutput) ClientGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientGateway) pulumi.StringOutput { return v.ClientGatewayId }).(pulumi.StringOutput)
}

func (o ClientGatewayOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientGateway) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

func (o ClientGatewayOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientGateway) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o ClientGatewayOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientGateway) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o ClientGatewayOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientGateway) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o ClientGatewayOutput) Tags() ClientGatewayTagArrayOutput {
	return o.ApplyT(func(v *ClientGateway) ClientGatewayTagArrayOutput { return v.Tags }).(ClientGatewayTagArrayOutput)
}

type ClientGatewayArrayOutput struct{ *pulumi.OutputState }

func (ClientGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientGateway)(nil)).Elem()
}

func (o ClientGatewayArrayOutput) ToClientGatewayArrayOutput() ClientGatewayArrayOutput {
	return o
}

func (o ClientGatewayArrayOutput) ToClientGatewayArrayOutputWithContext(ctx context.Context) ClientGatewayArrayOutput {
	return o
}

func (o ClientGatewayArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ClientGateway] {
	return pulumix.Output[[]*ClientGateway]{
		OutputState: o.OutputState,
	}
}

func (o ClientGatewayArrayOutput) Index(i pulumi.IntInput) ClientGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientGateway {
		return vs[0].([]*ClientGateway)[vs[1].(int)]
	}).(ClientGatewayOutput)
}

type ClientGatewayMapOutput struct{ *pulumi.OutputState }

func (ClientGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientGateway)(nil)).Elem()
}

func (o ClientGatewayMapOutput) ToClientGatewayMapOutput() ClientGatewayMapOutput {
	return o
}

func (o ClientGatewayMapOutput) ToClientGatewayMapOutputWithContext(ctx context.Context) ClientGatewayMapOutput {
	return o
}

func (o ClientGatewayMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ClientGateway] {
	return pulumix.Output[map[string]*ClientGateway]{
		OutputState: o.OutputState,
	}
}

func (o ClientGatewayMapOutput) MapIndex(k pulumi.StringInput) ClientGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientGateway {
		return vs[0].(map[string]*ClientGateway)[vs[1].(string)]
	}).(ClientGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientGatewayInput)(nil)).Elem(), &ClientGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientGatewayArrayInput)(nil)).Elem(), ClientGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientGatewayMapInput)(nil)).Elem(), ClientGatewayMap{})
	pulumi.RegisterOutputType(ClientGatewayOutput{})
	pulumi.RegisterOutputType(ClientGatewayArrayOutput{})
	pulumi.RegisterOutputType(ClientGatewayMapOutput{})
}
