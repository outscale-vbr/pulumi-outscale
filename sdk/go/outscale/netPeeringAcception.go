// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type NetPeeringAcception struct {
	pulumi.CustomResourceState

	AccepterNet   NetPeeringAcceptionAccepterNetOutput `pulumi:"accepterNet"`
	AccepterNetId pulumi.StringOutput                  `pulumi:"accepterNetId"`
	NetPeeringId  pulumi.StringOutput                  `pulumi:"netPeeringId"`
	RequestId     pulumi.StringOutput                  `pulumi:"requestId"`
	SourceNet     NetPeeringAcceptionSourceNetOutput   `pulumi:"sourceNet"`
	SourceNetId   pulumi.StringOutput                  `pulumi:"sourceNetId"`
	State         NetPeeringAcceptionStateTypeOutput   `pulumi:"state"`
	Tags          NetPeeringAcceptionTagArrayOutput    `pulumi:"tags"`
}

// NewNetPeeringAcception registers a new resource with the given unique name, arguments, and options.
func NewNetPeeringAcception(ctx *pulumi.Context,
	name string, args *NetPeeringAcceptionArgs, opts ...pulumi.ResourceOption) (*NetPeeringAcception, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetPeeringId == nil {
		return nil, errors.New("invalid value for required argument 'NetPeeringId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetPeeringAcception
	err := ctx.RegisterResource("outscale:index/netPeeringAcception:NetPeeringAcception", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetPeeringAcception gets an existing NetPeeringAcception resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetPeeringAcception(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetPeeringAcceptionState, opts ...pulumi.ResourceOption) (*NetPeeringAcception, error) {
	var resource NetPeeringAcception
	err := ctx.ReadResource("outscale:index/netPeeringAcception:NetPeeringAcception", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetPeeringAcception resources.
type netPeeringAcceptionState struct {
	AccepterNet   *NetPeeringAcceptionAccepterNet `pulumi:"accepterNet"`
	AccepterNetId *string                         `pulumi:"accepterNetId"`
	NetPeeringId  *string                         `pulumi:"netPeeringId"`
	RequestId     *string                         `pulumi:"requestId"`
	SourceNet     *NetPeeringAcceptionSourceNet   `pulumi:"sourceNet"`
	SourceNetId   *string                         `pulumi:"sourceNetId"`
	State         *NetPeeringAcceptionStateType   `pulumi:"state"`
	Tags          []NetPeeringAcceptionTag        `pulumi:"tags"`
}

type NetPeeringAcceptionState struct {
	AccepterNet   NetPeeringAcceptionAccepterNetPtrInput
	AccepterNetId pulumi.StringPtrInput
	NetPeeringId  pulumi.StringPtrInput
	RequestId     pulumi.StringPtrInput
	SourceNet     NetPeeringAcceptionSourceNetPtrInput
	SourceNetId   pulumi.StringPtrInput
	State         NetPeeringAcceptionStateTypePtrInput
	Tags          NetPeeringAcceptionTagArrayInput
}

func (NetPeeringAcceptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*netPeeringAcceptionState)(nil)).Elem()
}

type netPeeringAcceptionArgs struct {
	NetPeeringId string `pulumi:"netPeeringId"`
}

// The set of arguments for constructing a NetPeeringAcception resource.
type NetPeeringAcceptionArgs struct {
	NetPeeringId pulumi.StringInput
}

func (NetPeeringAcceptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netPeeringAcceptionArgs)(nil)).Elem()
}

type NetPeeringAcceptionInput interface {
	pulumi.Input

	ToNetPeeringAcceptionOutput() NetPeeringAcceptionOutput
	ToNetPeeringAcceptionOutputWithContext(ctx context.Context) NetPeeringAcceptionOutput
}

func (*NetPeeringAcception) ElementType() reflect.Type {
	return reflect.TypeOf((**NetPeeringAcception)(nil)).Elem()
}

func (i *NetPeeringAcception) ToNetPeeringAcceptionOutput() NetPeeringAcceptionOutput {
	return i.ToNetPeeringAcceptionOutputWithContext(context.Background())
}

func (i *NetPeeringAcception) ToNetPeeringAcceptionOutputWithContext(ctx context.Context) NetPeeringAcceptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetPeeringAcceptionOutput)
}

func (i *NetPeeringAcception) ToOutput(ctx context.Context) pulumix.Output[*NetPeeringAcception] {
	return pulumix.Output[*NetPeeringAcception]{
		OutputState: i.ToNetPeeringAcceptionOutputWithContext(ctx).OutputState,
	}
}

// NetPeeringAcceptionArrayInput is an input type that accepts NetPeeringAcceptionArray and NetPeeringAcceptionArrayOutput values.
// You can construct a concrete instance of `NetPeeringAcceptionArrayInput` via:
//
//	NetPeeringAcceptionArray{ NetPeeringAcceptionArgs{...} }
type NetPeeringAcceptionArrayInput interface {
	pulumi.Input

	ToNetPeeringAcceptionArrayOutput() NetPeeringAcceptionArrayOutput
	ToNetPeeringAcceptionArrayOutputWithContext(context.Context) NetPeeringAcceptionArrayOutput
}

type NetPeeringAcceptionArray []NetPeeringAcceptionInput

func (NetPeeringAcceptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetPeeringAcception)(nil)).Elem()
}

func (i NetPeeringAcceptionArray) ToNetPeeringAcceptionArrayOutput() NetPeeringAcceptionArrayOutput {
	return i.ToNetPeeringAcceptionArrayOutputWithContext(context.Background())
}

func (i NetPeeringAcceptionArray) ToNetPeeringAcceptionArrayOutputWithContext(ctx context.Context) NetPeeringAcceptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetPeeringAcceptionArrayOutput)
}

func (i NetPeeringAcceptionArray) ToOutput(ctx context.Context) pulumix.Output[[]*NetPeeringAcception] {
	return pulumix.Output[[]*NetPeeringAcception]{
		OutputState: i.ToNetPeeringAcceptionArrayOutputWithContext(ctx).OutputState,
	}
}

// NetPeeringAcceptionMapInput is an input type that accepts NetPeeringAcceptionMap and NetPeeringAcceptionMapOutput values.
// You can construct a concrete instance of `NetPeeringAcceptionMapInput` via:
//
//	NetPeeringAcceptionMap{ "key": NetPeeringAcceptionArgs{...} }
type NetPeeringAcceptionMapInput interface {
	pulumi.Input

	ToNetPeeringAcceptionMapOutput() NetPeeringAcceptionMapOutput
	ToNetPeeringAcceptionMapOutputWithContext(context.Context) NetPeeringAcceptionMapOutput
}

type NetPeeringAcceptionMap map[string]NetPeeringAcceptionInput

func (NetPeeringAcceptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetPeeringAcception)(nil)).Elem()
}

func (i NetPeeringAcceptionMap) ToNetPeeringAcceptionMapOutput() NetPeeringAcceptionMapOutput {
	return i.ToNetPeeringAcceptionMapOutputWithContext(context.Background())
}

func (i NetPeeringAcceptionMap) ToNetPeeringAcceptionMapOutputWithContext(ctx context.Context) NetPeeringAcceptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetPeeringAcceptionMapOutput)
}

func (i NetPeeringAcceptionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetPeeringAcception] {
	return pulumix.Output[map[string]*NetPeeringAcception]{
		OutputState: i.ToNetPeeringAcceptionMapOutputWithContext(ctx).OutputState,
	}
}

type NetPeeringAcceptionOutput struct{ *pulumi.OutputState }

func (NetPeeringAcceptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetPeeringAcception)(nil)).Elem()
}

func (o NetPeeringAcceptionOutput) ToNetPeeringAcceptionOutput() NetPeeringAcceptionOutput {
	return o
}

func (o NetPeeringAcceptionOutput) ToNetPeeringAcceptionOutputWithContext(ctx context.Context) NetPeeringAcceptionOutput {
	return o
}

func (o NetPeeringAcceptionOutput) ToOutput(ctx context.Context) pulumix.Output[*NetPeeringAcception] {
	return pulumix.Output[*NetPeeringAcception]{
		OutputState: o.OutputState,
	}
}

func (o NetPeeringAcceptionOutput) AccepterNet() NetPeeringAcceptionAccepterNetOutput {
	return o.ApplyT(func(v *NetPeeringAcception) NetPeeringAcceptionAccepterNetOutput { return v.AccepterNet }).(NetPeeringAcceptionAccepterNetOutput)
}

func (o NetPeeringAcceptionOutput) AccepterNetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcception) pulumi.StringOutput { return v.AccepterNetId }).(pulumi.StringOutput)
}

func (o NetPeeringAcceptionOutput) NetPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcception) pulumi.StringOutput { return v.NetPeeringId }).(pulumi.StringOutput)
}

func (o NetPeeringAcceptionOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcception) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o NetPeeringAcceptionOutput) SourceNet() NetPeeringAcceptionSourceNetOutput {
	return o.ApplyT(func(v *NetPeeringAcception) NetPeeringAcceptionSourceNetOutput { return v.SourceNet }).(NetPeeringAcceptionSourceNetOutput)
}

func (o NetPeeringAcceptionOutput) SourceNetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcception) pulumi.StringOutput { return v.SourceNetId }).(pulumi.StringOutput)
}

func (o NetPeeringAcceptionOutput) State() NetPeeringAcceptionStateTypeOutput {
	return o.ApplyT(func(v *NetPeeringAcception) NetPeeringAcceptionStateTypeOutput { return v.State }).(NetPeeringAcceptionStateTypeOutput)
}

func (o NetPeeringAcceptionOutput) Tags() NetPeeringAcceptionTagArrayOutput {
	return o.ApplyT(func(v *NetPeeringAcception) NetPeeringAcceptionTagArrayOutput { return v.Tags }).(NetPeeringAcceptionTagArrayOutput)
}

type NetPeeringAcceptionArrayOutput struct{ *pulumi.OutputState }

func (NetPeeringAcceptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetPeeringAcception)(nil)).Elem()
}

func (o NetPeeringAcceptionArrayOutput) ToNetPeeringAcceptionArrayOutput() NetPeeringAcceptionArrayOutput {
	return o
}

func (o NetPeeringAcceptionArrayOutput) ToNetPeeringAcceptionArrayOutputWithContext(ctx context.Context) NetPeeringAcceptionArrayOutput {
	return o
}

func (o NetPeeringAcceptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NetPeeringAcception] {
	return pulumix.Output[[]*NetPeeringAcception]{
		OutputState: o.OutputState,
	}
}

func (o NetPeeringAcceptionArrayOutput) Index(i pulumi.IntInput) NetPeeringAcceptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetPeeringAcception {
		return vs[0].([]*NetPeeringAcception)[vs[1].(int)]
	}).(NetPeeringAcceptionOutput)
}

type NetPeeringAcceptionMapOutput struct{ *pulumi.OutputState }

func (NetPeeringAcceptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetPeeringAcception)(nil)).Elem()
}

func (o NetPeeringAcceptionMapOutput) ToNetPeeringAcceptionMapOutput() NetPeeringAcceptionMapOutput {
	return o
}

func (o NetPeeringAcceptionMapOutput) ToNetPeeringAcceptionMapOutputWithContext(ctx context.Context) NetPeeringAcceptionMapOutput {
	return o
}

func (o NetPeeringAcceptionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetPeeringAcception] {
	return pulumix.Output[map[string]*NetPeeringAcception]{
		OutputState: o.OutputState,
	}
}

func (o NetPeeringAcceptionMapOutput) MapIndex(k pulumi.StringInput) NetPeeringAcceptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetPeeringAcception {
		return vs[0].(map[string]*NetPeeringAcception)[vs[1].(string)]
	}).(NetPeeringAcceptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetPeeringAcceptionInput)(nil)).Elem(), &NetPeeringAcception{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetPeeringAcceptionArrayInput)(nil)).Elem(), NetPeeringAcceptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetPeeringAcceptionMapInput)(nil)).Elem(), NetPeeringAcceptionMap{})
	pulumi.RegisterOutputType(NetPeeringAcceptionOutput{})
	pulumi.RegisterOutputType(NetPeeringAcceptionArrayOutput{})
	pulumi.RegisterOutputType(NetPeeringAcceptionMapOutput{})
}
