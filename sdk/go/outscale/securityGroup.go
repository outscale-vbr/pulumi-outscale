// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SecurityGroup struct {
	pulumi.CustomResourceState

	AccountId                 pulumi.StringOutput                  `pulumi:"accountId"`
	Description               pulumi.StringPtrOutput               `pulumi:"description"`
	InboundRules              SecurityGroupInboundRuleArrayOutput  `pulumi:"inboundRules"`
	NetId                     pulumi.StringOutput                  `pulumi:"netId"`
	OutboundRules             SecurityGroupOutboundRuleArrayOutput `pulumi:"outboundRules"`
	RemoveDefaultOutboundRule pulumi.BoolPtrOutput                 `pulumi:"removeDefaultOutboundRule"`
	RequestId                 pulumi.StringOutput                  `pulumi:"requestId"`
	SecurityGroupId           pulumi.StringOutput                  `pulumi:"securityGroupId"`
	SecurityGroupName         pulumi.StringOutput                  `pulumi:"securityGroupName"`
	Tag                       pulumi.MapOutput                     `pulumi:"tag"`
	Tags                      SecurityGroupTagArrayOutput          `pulumi:"tags"`
}

// NewSecurityGroup registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroup(ctx *pulumi.Context,
	name string, args *SecurityGroupArgs, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	if args == nil {
		args = &SecurityGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroup
	err := ctx.RegisterResource("outscale:index/securityGroup:SecurityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroup gets an existing SecurityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupState, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	var resource SecurityGroup
	err := ctx.ReadResource("outscale:index/securityGroup:SecurityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroup resources.
type securityGroupState struct {
	AccountId                 *string                     `pulumi:"accountId"`
	Description               *string                     `pulumi:"description"`
	InboundRules              []SecurityGroupInboundRule  `pulumi:"inboundRules"`
	NetId                     *string                     `pulumi:"netId"`
	OutboundRules             []SecurityGroupOutboundRule `pulumi:"outboundRules"`
	RemoveDefaultOutboundRule *bool                       `pulumi:"removeDefaultOutboundRule"`
	RequestId                 *string                     `pulumi:"requestId"`
	SecurityGroupId           *string                     `pulumi:"securityGroupId"`
	SecurityGroupName         *string                     `pulumi:"securityGroupName"`
	Tag                       map[string]interface{}      `pulumi:"tag"`
	Tags                      []SecurityGroupTag          `pulumi:"tags"`
}

type SecurityGroupState struct {
	AccountId                 pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	InboundRules              SecurityGroupInboundRuleArrayInput
	NetId                     pulumi.StringPtrInput
	OutboundRules             SecurityGroupOutboundRuleArrayInput
	RemoveDefaultOutboundRule pulumi.BoolPtrInput
	RequestId                 pulumi.StringPtrInput
	SecurityGroupId           pulumi.StringPtrInput
	SecurityGroupName         pulumi.StringPtrInput
	Tag                       pulumi.MapInput
	Tags                      SecurityGroupTagArrayInput
}

func (SecurityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupState)(nil)).Elem()
}

type securityGroupArgs struct {
	Description               *string                `pulumi:"description"`
	NetId                     *string                `pulumi:"netId"`
	RemoveDefaultOutboundRule *bool                  `pulumi:"removeDefaultOutboundRule"`
	SecurityGroupName         *string                `pulumi:"securityGroupName"`
	Tag                       map[string]interface{} `pulumi:"tag"`
	Tags                      []SecurityGroupTag     `pulumi:"tags"`
}

// The set of arguments for constructing a SecurityGroup resource.
type SecurityGroupArgs struct {
	Description               pulumi.StringPtrInput
	NetId                     pulumi.StringPtrInput
	RemoveDefaultOutboundRule pulumi.BoolPtrInput
	SecurityGroupName         pulumi.StringPtrInput
	Tag                       pulumi.MapInput
	Tags                      SecurityGroupTagArrayInput
}

func (SecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupArgs)(nil)).Elem()
}

type SecurityGroupInput interface {
	pulumi.Input

	ToSecurityGroupOutput() SecurityGroupOutput
	ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput
}

func (*SecurityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (i *SecurityGroup) ToSecurityGroupOutput() SecurityGroupOutput {
	return i.ToSecurityGroupOutputWithContext(context.Background())
}

func (i *SecurityGroup) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupOutput)
}

func (i *SecurityGroup) ToOutput(ctx context.Context) pulumix.Output[*SecurityGroup] {
	return pulumix.Output[*SecurityGroup]{
		OutputState: i.ToSecurityGroupOutputWithContext(ctx).OutputState,
	}
}

// SecurityGroupArrayInput is an input type that accepts SecurityGroupArray and SecurityGroupArrayOutput values.
// You can construct a concrete instance of `SecurityGroupArrayInput` via:
//
//	SecurityGroupArray{ SecurityGroupArgs{...} }
type SecurityGroupArrayInput interface {
	pulumi.Input

	ToSecurityGroupArrayOutput() SecurityGroupArrayOutput
	ToSecurityGroupArrayOutputWithContext(context.Context) SecurityGroupArrayOutput
}

type SecurityGroupArray []SecurityGroupInput

func (SecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroup)(nil)).Elem()
}

func (i SecurityGroupArray) ToSecurityGroupArrayOutput() SecurityGroupArrayOutput {
	return i.ToSecurityGroupArrayOutputWithContext(context.Background())
}

func (i SecurityGroupArray) ToSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupArrayOutput)
}

func (i SecurityGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]*SecurityGroup] {
	return pulumix.Output[[]*SecurityGroup]{
		OutputState: i.ToSecurityGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// SecurityGroupMapInput is an input type that accepts SecurityGroupMap and SecurityGroupMapOutput values.
// You can construct a concrete instance of `SecurityGroupMapInput` via:
//
//	SecurityGroupMap{ "key": SecurityGroupArgs{...} }
type SecurityGroupMapInput interface {
	pulumi.Input

	ToSecurityGroupMapOutput() SecurityGroupMapOutput
	ToSecurityGroupMapOutputWithContext(context.Context) SecurityGroupMapOutput
}

type SecurityGroupMap map[string]SecurityGroupInput

func (SecurityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroup)(nil)).Elem()
}

func (i SecurityGroupMap) ToSecurityGroupMapOutput() SecurityGroupMapOutput {
	return i.ToSecurityGroupMapOutputWithContext(context.Background())
}

func (i SecurityGroupMap) ToSecurityGroupMapOutputWithContext(ctx context.Context) SecurityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupMapOutput)
}

func (i SecurityGroupMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SecurityGroup] {
	return pulumix.Output[map[string]*SecurityGroup]{
		OutputState: i.ToSecurityGroupMapOutputWithContext(ctx).OutputState,
	}
}

type SecurityGroupOutput struct{ *pulumi.OutputState }

func (SecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupOutput) ToSecurityGroupOutput() SecurityGroupOutput {
	return o
}

func (o SecurityGroupOutput) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return o
}

func (o SecurityGroupOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityGroup] {
	return pulumix.Output[*SecurityGroup]{
		OutputState: o.OutputState,
	}
}

func (o SecurityGroupOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o SecurityGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SecurityGroupOutput) InboundRules() SecurityGroupInboundRuleArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupInboundRuleArrayOutput { return v.InboundRules }).(SecurityGroupInboundRuleArrayOutput)
}

func (o SecurityGroupOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o SecurityGroupOutput) OutboundRules() SecurityGroupOutboundRuleArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupOutboundRuleArrayOutput { return v.OutboundRules }).(SecurityGroupOutboundRuleArrayOutput)
}

func (o SecurityGroupOutput) RemoveDefaultOutboundRule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.BoolPtrOutput { return v.RemoveDefaultOutboundRule }).(pulumi.BoolPtrOutput)
}

func (o SecurityGroupOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o SecurityGroupOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

func (o SecurityGroupOutput) SecurityGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.SecurityGroupName }).(pulumi.StringOutput)
}

func (o SecurityGroupOutput) Tag() pulumi.MapOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.MapOutput { return v.Tag }).(pulumi.MapOutput)
}

func (o SecurityGroupOutput) Tags() SecurityGroupTagArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupTagArrayOutput { return v.Tags }).(SecurityGroupTagArrayOutput)
}

type SecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupArrayOutput) ToSecurityGroupArrayOutput() SecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupArrayOutput) ToSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SecurityGroup] {
	return pulumix.Output[[]*SecurityGroup]{
		OutputState: o.OutputState,
	}
}

func (o SecurityGroupArrayOutput) Index(i pulumi.IntInput) SecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroup {
		return vs[0].([]*SecurityGroup)[vs[1].(int)]
	}).(SecurityGroupOutput)
}

type SecurityGroupMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupMapOutput) ToSecurityGroupMapOutput() SecurityGroupMapOutput {
	return o
}

func (o SecurityGroupMapOutput) ToSecurityGroupMapOutputWithContext(ctx context.Context) SecurityGroupMapOutput {
	return o
}

func (o SecurityGroupMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SecurityGroup] {
	return pulumix.Output[map[string]*SecurityGroup]{
		OutputState: o.OutputState,
	}
}

func (o SecurityGroupMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroup {
		return vs[0].(map[string]*SecurityGroup)[vs[1].(string)]
	}).(SecurityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupInput)(nil)).Elem(), &SecurityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupArrayInput)(nil)).Elem(), SecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupMapInput)(nil)).Elem(), SecurityGroupMap{})
	pulumi.RegisterOutputType(SecurityGroupOutput{})
	pulumi.RegisterOutputType(SecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupMapOutput{})
}
