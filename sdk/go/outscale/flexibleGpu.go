// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FlexibleGpu struct {
	pulumi.CustomResourceState

	DeleteOnVmDeletion pulumi.BoolOutput   `pulumi:"deleteOnVmDeletion"`
	FlexibleGpuId      pulumi.StringOutput `pulumi:"flexibleGpuId"`
	Generation         pulumi.StringOutput `pulumi:"generation"`
	ModelName          pulumi.StringOutput `pulumi:"modelName"`
	RequestId          pulumi.StringOutput `pulumi:"requestId"`
	State              pulumi.StringOutput `pulumi:"state"`
	SubregionName      pulumi.StringOutput `pulumi:"subregionName"`
	VmId               pulumi.StringOutput `pulumi:"vmId"`
}

// NewFlexibleGpu registers a new resource with the given unique name, arguments, and options.
func NewFlexibleGpu(ctx *pulumi.Context,
	name string, args *FlexibleGpuArgs, opts ...pulumi.ResourceOption) (*FlexibleGpu, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModelName == nil {
		return nil, errors.New("invalid value for required argument 'ModelName'")
	}
	if args.SubregionName == nil {
		return nil, errors.New("invalid value for required argument 'SubregionName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexibleGpu
	err := ctx.RegisterResource("outscale:index/flexibleGpu:FlexibleGpu", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexibleGpu gets an existing FlexibleGpu resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexibleGpu(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexibleGpuState, opts ...pulumi.ResourceOption) (*FlexibleGpu, error) {
	var resource FlexibleGpu
	err := ctx.ReadResource("outscale:index/flexibleGpu:FlexibleGpu", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexibleGpu resources.
type flexibleGpuState struct {
	DeleteOnVmDeletion *bool   `pulumi:"deleteOnVmDeletion"`
	FlexibleGpuId      *string `pulumi:"flexibleGpuId"`
	Generation         *string `pulumi:"generation"`
	ModelName          *string `pulumi:"modelName"`
	RequestId          *string `pulumi:"requestId"`
	State              *string `pulumi:"state"`
	SubregionName      *string `pulumi:"subregionName"`
	VmId               *string `pulumi:"vmId"`
}

type FlexibleGpuState struct {
	DeleteOnVmDeletion pulumi.BoolPtrInput
	FlexibleGpuId      pulumi.StringPtrInput
	Generation         pulumi.StringPtrInput
	ModelName          pulumi.StringPtrInput
	RequestId          pulumi.StringPtrInput
	State              pulumi.StringPtrInput
	SubregionName      pulumi.StringPtrInput
	VmId               pulumi.StringPtrInput
}

func (FlexibleGpuState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleGpuState)(nil)).Elem()
}

type flexibleGpuArgs struct {
	DeleteOnVmDeletion *bool   `pulumi:"deleteOnVmDeletion"`
	Generation         *string `pulumi:"generation"`
	ModelName          string  `pulumi:"modelName"`
	SubregionName      string  `pulumi:"subregionName"`
}

// The set of arguments for constructing a FlexibleGpu resource.
type FlexibleGpuArgs struct {
	DeleteOnVmDeletion pulumi.BoolPtrInput
	Generation         pulumi.StringPtrInput
	ModelName          pulumi.StringInput
	SubregionName      pulumi.StringInput
}

func (FlexibleGpuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleGpuArgs)(nil)).Elem()
}

type FlexibleGpuInput interface {
	pulumi.Input

	ToFlexibleGpuOutput() FlexibleGpuOutput
	ToFlexibleGpuOutputWithContext(ctx context.Context) FlexibleGpuOutput
}

func (*FlexibleGpu) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleGpu)(nil)).Elem()
}

func (i *FlexibleGpu) ToFlexibleGpuOutput() FlexibleGpuOutput {
	return i.ToFlexibleGpuOutputWithContext(context.Background())
}

func (i *FlexibleGpu) ToFlexibleGpuOutputWithContext(ctx context.Context) FlexibleGpuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleGpuOutput)
}

func (i *FlexibleGpu) ToOutput(ctx context.Context) pulumix.Output[*FlexibleGpu] {
	return pulumix.Output[*FlexibleGpu]{
		OutputState: i.ToFlexibleGpuOutputWithContext(ctx).OutputState,
	}
}

// FlexibleGpuArrayInput is an input type that accepts FlexibleGpuArray and FlexibleGpuArrayOutput values.
// You can construct a concrete instance of `FlexibleGpuArrayInput` via:
//
//	FlexibleGpuArray{ FlexibleGpuArgs{...} }
type FlexibleGpuArrayInput interface {
	pulumi.Input

	ToFlexibleGpuArrayOutput() FlexibleGpuArrayOutput
	ToFlexibleGpuArrayOutputWithContext(context.Context) FlexibleGpuArrayOutput
}

type FlexibleGpuArray []FlexibleGpuInput

func (FlexibleGpuArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleGpu)(nil)).Elem()
}

func (i FlexibleGpuArray) ToFlexibleGpuArrayOutput() FlexibleGpuArrayOutput {
	return i.ToFlexibleGpuArrayOutputWithContext(context.Background())
}

func (i FlexibleGpuArray) ToFlexibleGpuArrayOutputWithContext(ctx context.Context) FlexibleGpuArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleGpuArrayOutput)
}

func (i FlexibleGpuArray) ToOutput(ctx context.Context) pulumix.Output[[]*FlexibleGpu] {
	return pulumix.Output[[]*FlexibleGpu]{
		OutputState: i.ToFlexibleGpuArrayOutputWithContext(ctx).OutputState,
	}
}

// FlexibleGpuMapInput is an input type that accepts FlexibleGpuMap and FlexibleGpuMapOutput values.
// You can construct a concrete instance of `FlexibleGpuMapInput` via:
//
//	FlexibleGpuMap{ "key": FlexibleGpuArgs{...} }
type FlexibleGpuMapInput interface {
	pulumi.Input

	ToFlexibleGpuMapOutput() FlexibleGpuMapOutput
	ToFlexibleGpuMapOutputWithContext(context.Context) FlexibleGpuMapOutput
}

type FlexibleGpuMap map[string]FlexibleGpuInput

func (FlexibleGpuMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleGpu)(nil)).Elem()
}

func (i FlexibleGpuMap) ToFlexibleGpuMapOutput() FlexibleGpuMapOutput {
	return i.ToFlexibleGpuMapOutputWithContext(context.Background())
}

func (i FlexibleGpuMap) ToFlexibleGpuMapOutputWithContext(ctx context.Context) FlexibleGpuMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleGpuMapOutput)
}

func (i FlexibleGpuMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FlexibleGpu] {
	return pulumix.Output[map[string]*FlexibleGpu]{
		OutputState: i.ToFlexibleGpuMapOutputWithContext(ctx).OutputState,
	}
}

type FlexibleGpuOutput struct{ *pulumi.OutputState }

func (FlexibleGpuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleGpu)(nil)).Elem()
}

func (o FlexibleGpuOutput) ToFlexibleGpuOutput() FlexibleGpuOutput {
	return o
}

func (o FlexibleGpuOutput) ToFlexibleGpuOutputWithContext(ctx context.Context) FlexibleGpuOutput {
	return o
}

func (o FlexibleGpuOutput) ToOutput(ctx context.Context) pulumix.Output[*FlexibleGpu] {
	return pulumix.Output[*FlexibleGpu]{
		OutputState: o.OutputState,
	}
}

func (o FlexibleGpuOutput) DeleteOnVmDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v *FlexibleGpu) pulumi.BoolOutput { return v.DeleteOnVmDeletion }).(pulumi.BoolOutput)
}

func (o FlexibleGpuOutput) FlexibleGpuId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpu) pulumi.StringOutput { return v.FlexibleGpuId }).(pulumi.StringOutput)
}

func (o FlexibleGpuOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpu) pulumi.StringOutput { return v.Generation }).(pulumi.StringOutput)
}

func (o FlexibleGpuOutput) ModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpu) pulumi.StringOutput { return v.ModelName }).(pulumi.StringOutput)
}

func (o FlexibleGpuOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpu) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o FlexibleGpuOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpu) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o FlexibleGpuOutput) SubregionName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpu) pulumi.StringOutput { return v.SubregionName }).(pulumi.StringOutput)
}

func (o FlexibleGpuOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpu) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

type FlexibleGpuArrayOutput struct{ *pulumi.OutputState }

func (FlexibleGpuArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleGpu)(nil)).Elem()
}

func (o FlexibleGpuArrayOutput) ToFlexibleGpuArrayOutput() FlexibleGpuArrayOutput {
	return o
}

func (o FlexibleGpuArrayOutput) ToFlexibleGpuArrayOutputWithContext(ctx context.Context) FlexibleGpuArrayOutput {
	return o
}

func (o FlexibleGpuArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FlexibleGpu] {
	return pulumix.Output[[]*FlexibleGpu]{
		OutputState: o.OutputState,
	}
}

func (o FlexibleGpuArrayOutput) Index(i pulumi.IntInput) FlexibleGpuOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexibleGpu {
		return vs[0].([]*FlexibleGpu)[vs[1].(int)]
	}).(FlexibleGpuOutput)
}

type FlexibleGpuMapOutput struct{ *pulumi.OutputState }

func (FlexibleGpuMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleGpu)(nil)).Elem()
}

func (o FlexibleGpuMapOutput) ToFlexibleGpuMapOutput() FlexibleGpuMapOutput {
	return o
}

func (o FlexibleGpuMapOutput) ToFlexibleGpuMapOutputWithContext(ctx context.Context) FlexibleGpuMapOutput {
	return o
}

func (o FlexibleGpuMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FlexibleGpu] {
	return pulumix.Output[map[string]*FlexibleGpu]{
		OutputState: o.OutputState,
	}
}

func (o FlexibleGpuMapOutput) MapIndex(k pulumi.StringInput) FlexibleGpuOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexibleGpu {
		return vs[0].(map[string]*FlexibleGpu)[vs[1].(string)]
	}).(FlexibleGpuOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleGpuInput)(nil)).Elem(), &FlexibleGpu{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleGpuArrayInput)(nil)).Elem(), FlexibleGpuArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleGpuMapInput)(nil)).Elem(), FlexibleGpuMap{})
	pulumi.RegisterOutputType(FlexibleGpuOutput{})
	pulumi.RegisterOutputType(FlexibleGpuArrayOutput{})
	pulumi.RegisterOutputType(FlexibleGpuMapOutput{})
}
