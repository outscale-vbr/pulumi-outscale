// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type FlexibleGpuLink struct {
	pulumi.CustomResourceState

	FlexibleGpuId pulumi.StringOutput `pulumi:"flexibleGpuId"`
	RequestId     pulumi.StringOutput `pulumi:"requestId"`
	VmId          pulumi.StringOutput `pulumi:"vmId"`
}

// NewFlexibleGpuLink registers a new resource with the given unique name, arguments, and options.
func NewFlexibleGpuLink(ctx *pulumi.Context,
	name string, args *FlexibleGpuLinkArgs, opts ...pulumi.ResourceOption) (*FlexibleGpuLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlexibleGpuId == nil {
		return nil, errors.New("invalid value for required argument 'FlexibleGpuId'")
	}
	if args.VmId == nil {
		return nil, errors.New("invalid value for required argument 'VmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexibleGpuLink
	err := ctx.RegisterResource("outscale:index/flexibleGpuLink:FlexibleGpuLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexibleGpuLink gets an existing FlexibleGpuLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexibleGpuLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexibleGpuLinkState, opts ...pulumi.ResourceOption) (*FlexibleGpuLink, error) {
	var resource FlexibleGpuLink
	err := ctx.ReadResource("outscale:index/flexibleGpuLink:FlexibleGpuLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexibleGpuLink resources.
type flexibleGpuLinkState struct {
	FlexibleGpuId *string `pulumi:"flexibleGpuId"`
	RequestId     *string `pulumi:"requestId"`
	VmId          *string `pulumi:"vmId"`
}

type FlexibleGpuLinkState struct {
	FlexibleGpuId pulumi.StringPtrInput
	RequestId     pulumi.StringPtrInput
	VmId          pulumi.StringPtrInput
}

func (FlexibleGpuLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleGpuLinkState)(nil)).Elem()
}

type flexibleGpuLinkArgs struct {
	FlexibleGpuId string `pulumi:"flexibleGpuId"`
	VmId          string `pulumi:"vmId"`
}

// The set of arguments for constructing a FlexibleGpuLink resource.
type FlexibleGpuLinkArgs struct {
	FlexibleGpuId pulumi.StringInput
	VmId          pulumi.StringInput
}

func (FlexibleGpuLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexibleGpuLinkArgs)(nil)).Elem()
}

type FlexibleGpuLinkInput interface {
	pulumi.Input

	ToFlexibleGpuLinkOutput() FlexibleGpuLinkOutput
	ToFlexibleGpuLinkOutputWithContext(ctx context.Context) FlexibleGpuLinkOutput
}

func (*FlexibleGpuLink) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleGpuLink)(nil)).Elem()
}

func (i *FlexibleGpuLink) ToFlexibleGpuLinkOutput() FlexibleGpuLinkOutput {
	return i.ToFlexibleGpuLinkOutputWithContext(context.Background())
}

func (i *FlexibleGpuLink) ToFlexibleGpuLinkOutputWithContext(ctx context.Context) FlexibleGpuLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleGpuLinkOutput)
}

func (i *FlexibleGpuLink) ToOutput(ctx context.Context) pulumix.Output[*FlexibleGpuLink] {
	return pulumix.Output[*FlexibleGpuLink]{
		OutputState: i.ToFlexibleGpuLinkOutputWithContext(ctx).OutputState,
	}
}

// FlexibleGpuLinkArrayInput is an input type that accepts FlexibleGpuLinkArray and FlexibleGpuLinkArrayOutput values.
// You can construct a concrete instance of `FlexibleGpuLinkArrayInput` via:
//
//	FlexibleGpuLinkArray{ FlexibleGpuLinkArgs{...} }
type FlexibleGpuLinkArrayInput interface {
	pulumi.Input

	ToFlexibleGpuLinkArrayOutput() FlexibleGpuLinkArrayOutput
	ToFlexibleGpuLinkArrayOutputWithContext(context.Context) FlexibleGpuLinkArrayOutput
}

type FlexibleGpuLinkArray []FlexibleGpuLinkInput

func (FlexibleGpuLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleGpuLink)(nil)).Elem()
}

func (i FlexibleGpuLinkArray) ToFlexibleGpuLinkArrayOutput() FlexibleGpuLinkArrayOutput {
	return i.ToFlexibleGpuLinkArrayOutputWithContext(context.Background())
}

func (i FlexibleGpuLinkArray) ToFlexibleGpuLinkArrayOutputWithContext(ctx context.Context) FlexibleGpuLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleGpuLinkArrayOutput)
}

func (i FlexibleGpuLinkArray) ToOutput(ctx context.Context) pulumix.Output[[]*FlexibleGpuLink] {
	return pulumix.Output[[]*FlexibleGpuLink]{
		OutputState: i.ToFlexibleGpuLinkArrayOutputWithContext(ctx).OutputState,
	}
}

// FlexibleGpuLinkMapInput is an input type that accepts FlexibleGpuLinkMap and FlexibleGpuLinkMapOutput values.
// You can construct a concrete instance of `FlexibleGpuLinkMapInput` via:
//
//	FlexibleGpuLinkMap{ "key": FlexibleGpuLinkArgs{...} }
type FlexibleGpuLinkMapInput interface {
	pulumi.Input

	ToFlexibleGpuLinkMapOutput() FlexibleGpuLinkMapOutput
	ToFlexibleGpuLinkMapOutputWithContext(context.Context) FlexibleGpuLinkMapOutput
}

type FlexibleGpuLinkMap map[string]FlexibleGpuLinkInput

func (FlexibleGpuLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleGpuLink)(nil)).Elem()
}

func (i FlexibleGpuLinkMap) ToFlexibleGpuLinkMapOutput() FlexibleGpuLinkMapOutput {
	return i.ToFlexibleGpuLinkMapOutputWithContext(context.Background())
}

func (i FlexibleGpuLinkMap) ToFlexibleGpuLinkMapOutputWithContext(ctx context.Context) FlexibleGpuLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexibleGpuLinkMapOutput)
}

func (i FlexibleGpuLinkMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FlexibleGpuLink] {
	return pulumix.Output[map[string]*FlexibleGpuLink]{
		OutputState: i.ToFlexibleGpuLinkMapOutputWithContext(ctx).OutputState,
	}
}

type FlexibleGpuLinkOutput struct{ *pulumi.OutputState }

func (FlexibleGpuLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexibleGpuLink)(nil)).Elem()
}

func (o FlexibleGpuLinkOutput) ToFlexibleGpuLinkOutput() FlexibleGpuLinkOutput {
	return o
}

func (o FlexibleGpuLinkOutput) ToFlexibleGpuLinkOutputWithContext(ctx context.Context) FlexibleGpuLinkOutput {
	return o
}

func (o FlexibleGpuLinkOutput) ToOutput(ctx context.Context) pulumix.Output[*FlexibleGpuLink] {
	return pulumix.Output[*FlexibleGpuLink]{
		OutputState: o.OutputState,
	}
}

func (o FlexibleGpuLinkOutput) FlexibleGpuId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpuLink) pulumi.StringOutput { return v.FlexibleGpuId }).(pulumi.StringOutput)
}

func (o FlexibleGpuLinkOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpuLink) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o FlexibleGpuLinkOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexibleGpuLink) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

type FlexibleGpuLinkArrayOutput struct{ *pulumi.OutputState }

func (FlexibleGpuLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexibleGpuLink)(nil)).Elem()
}

func (o FlexibleGpuLinkArrayOutput) ToFlexibleGpuLinkArrayOutput() FlexibleGpuLinkArrayOutput {
	return o
}

func (o FlexibleGpuLinkArrayOutput) ToFlexibleGpuLinkArrayOutputWithContext(ctx context.Context) FlexibleGpuLinkArrayOutput {
	return o
}

func (o FlexibleGpuLinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FlexibleGpuLink] {
	return pulumix.Output[[]*FlexibleGpuLink]{
		OutputState: o.OutputState,
	}
}

func (o FlexibleGpuLinkArrayOutput) Index(i pulumi.IntInput) FlexibleGpuLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexibleGpuLink {
		return vs[0].([]*FlexibleGpuLink)[vs[1].(int)]
	}).(FlexibleGpuLinkOutput)
}

type FlexibleGpuLinkMapOutput struct{ *pulumi.OutputState }

func (FlexibleGpuLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexibleGpuLink)(nil)).Elem()
}

func (o FlexibleGpuLinkMapOutput) ToFlexibleGpuLinkMapOutput() FlexibleGpuLinkMapOutput {
	return o
}

func (o FlexibleGpuLinkMapOutput) ToFlexibleGpuLinkMapOutputWithContext(ctx context.Context) FlexibleGpuLinkMapOutput {
	return o
}

func (o FlexibleGpuLinkMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FlexibleGpuLink] {
	return pulumix.Output[map[string]*FlexibleGpuLink]{
		OutputState: o.OutputState,
	}
}

func (o FlexibleGpuLinkMapOutput) MapIndex(k pulumi.StringInput) FlexibleGpuLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexibleGpuLink {
		return vs[0].(map[string]*FlexibleGpuLink)[vs[1].(string)]
	}).(FlexibleGpuLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleGpuLinkInput)(nil)).Elem(), &FlexibleGpuLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleGpuLinkArrayInput)(nil)).Elem(), FlexibleGpuLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexibleGpuLinkMapInput)(nil)).Elem(), FlexibleGpuLinkMap{})
	pulumi.RegisterOutputType(FlexibleGpuLinkOutput{})
	pulumi.RegisterOutputType(FlexibleGpuLinkArrayOutput{})
	pulumi.RegisterOutputType(FlexibleGpuLinkMapOutput{})
}
