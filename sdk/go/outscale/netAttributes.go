// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type NetAttributes struct {
	pulumi.CustomResourceState

	DhcpOptionsSetId pulumi.StringOutput         `pulumi:"dhcpOptionsSetId"`
	IpRange          pulumi.StringOutput         `pulumi:"ipRange"`
	NetId            pulumi.StringOutput         `pulumi:"netId"`
	RequestId        pulumi.StringOutput         `pulumi:"requestId"`
	State            pulumi.StringOutput         `pulumi:"state"`
	Tags             NetAttributesTagArrayOutput `pulumi:"tags"`
	Tenancy          pulumi.StringOutput         `pulumi:"tenancy"`
}

// NewNetAttributes registers a new resource with the given unique name, arguments, and options.
func NewNetAttributes(ctx *pulumi.Context,
	name string, args *NetAttributesArgs, opts ...pulumi.ResourceOption) (*NetAttributes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetId == nil {
		return nil, errors.New("invalid value for required argument 'NetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetAttributes
	err := ctx.RegisterResource("outscale:index/netAttributes:NetAttributes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetAttributes gets an existing NetAttributes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetAttributes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetAttributesState, opts ...pulumi.ResourceOption) (*NetAttributes, error) {
	var resource NetAttributes
	err := ctx.ReadResource("outscale:index/netAttributes:NetAttributes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetAttributes resources.
type netAttributesState struct {
	DhcpOptionsSetId *string            `pulumi:"dhcpOptionsSetId"`
	IpRange          *string            `pulumi:"ipRange"`
	NetId            *string            `pulumi:"netId"`
	RequestId        *string            `pulumi:"requestId"`
	State            *string            `pulumi:"state"`
	Tags             []NetAttributesTag `pulumi:"tags"`
	Tenancy          *string            `pulumi:"tenancy"`
}

type NetAttributesState struct {
	DhcpOptionsSetId pulumi.StringPtrInput
	IpRange          pulumi.StringPtrInput
	NetId            pulumi.StringPtrInput
	RequestId        pulumi.StringPtrInput
	State            pulumi.StringPtrInput
	Tags             NetAttributesTagArrayInput
	Tenancy          pulumi.StringPtrInput
}

func (NetAttributesState) ElementType() reflect.Type {
	return reflect.TypeOf((*netAttributesState)(nil)).Elem()
}

type netAttributesArgs struct {
	DhcpOptionsSetId *string `pulumi:"dhcpOptionsSetId"`
	NetId            string  `pulumi:"netId"`
}

// The set of arguments for constructing a NetAttributes resource.
type NetAttributesArgs struct {
	DhcpOptionsSetId pulumi.StringPtrInput
	NetId            pulumi.StringInput
}

func (NetAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netAttributesArgs)(nil)).Elem()
}

type NetAttributesInput interface {
	pulumi.Input

	ToNetAttributesOutput() NetAttributesOutput
	ToNetAttributesOutputWithContext(ctx context.Context) NetAttributesOutput
}

func (*NetAttributes) ElementType() reflect.Type {
	return reflect.TypeOf((**NetAttributes)(nil)).Elem()
}

func (i *NetAttributes) ToNetAttributesOutput() NetAttributesOutput {
	return i.ToNetAttributesOutputWithContext(context.Background())
}

func (i *NetAttributes) ToNetAttributesOutputWithContext(ctx context.Context) NetAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetAttributesOutput)
}

func (i *NetAttributes) ToOutput(ctx context.Context) pulumix.Output[*NetAttributes] {
	return pulumix.Output[*NetAttributes]{
		OutputState: i.ToNetAttributesOutputWithContext(ctx).OutputState,
	}
}

// NetAttributesArrayInput is an input type that accepts NetAttributesArray and NetAttributesArrayOutput values.
// You can construct a concrete instance of `NetAttributesArrayInput` via:
//
//	NetAttributesArray{ NetAttributesArgs{...} }
type NetAttributesArrayInput interface {
	pulumi.Input

	ToNetAttributesArrayOutput() NetAttributesArrayOutput
	ToNetAttributesArrayOutputWithContext(context.Context) NetAttributesArrayOutput
}

type NetAttributesArray []NetAttributesInput

func (NetAttributesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetAttributes)(nil)).Elem()
}

func (i NetAttributesArray) ToNetAttributesArrayOutput() NetAttributesArrayOutput {
	return i.ToNetAttributesArrayOutputWithContext(context.Background())
}

func (i NetAttributesArray) ToNetAttributesArrayOutputWithContext(ctx context.Context) NetAttributesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetAttributesArrayOutput)
}

func (i NetAttributesArray) ToOutput(ctx context.Context) pulumix.Output[[]*NetAttributes] {
	return pulumix.Output[[]*NetAttributes]{
		OutputState: i.ToNetAttributesArrayOutputWithContext(ctx).OutputState,
	}
}

// NetAttributesMapInput is an input type that accepts NetAttributesMap and NetAttributesMapOutput values.
// You can construct a concrete instance of `NetAttributesMapInput` via:
//
//	NetAttributesMap{ "key": NetAttributesArgs{...} }
type NetAttributesMapInput interface {
	pulumi.Input

	ToNetAttributesMapOutput() NetAttributesMapOutput
	ToNetAttributesMapOutputWithContext(context.Context) NetAttributesMapOutput
}

type NetAttributesMap map[string]NetAttributesInput

func (NetAttributesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetAttributes)(nil)).Elem()
}

func (i NetAttributesMap) ToNetAttributesMapOutput() NetAttributesMapOutput {
	return i.ToNetAttributesMapOutputWithContext(context.Background())
}

func (i NetAttributesMap) ToNetAttributesMapOutputWithContext(ctx context.Context) NetAttributesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetAttributesMapOutput)
}

func (i NetAttributesMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetAttributes] {
	return pulumix.Output[map[string]*NetAttributes]{
		OutputState: i.ToNetAttributesMapOutputWithContext(ctx).OutputState,
	}
}

type NetAttributesOutput struct{ *pulumi.OutputState }

func (NetAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetAttributes)(nil)).Elem()
}

func (o NetAttributesOutput) ToNetAttributesOutput() NetAttributesOutput {
	return o
}

func (o NetAttributesOutput) ToNetAttributesOutputWithContext(ctx context.Context) NetAttributesOutput {
	return o
}

func (o NetAttributesOutput) ToOutput(ctx context.Context) pulumix.Output[*NetAttributes] {
	return pulumix.Output[*NetAttributes]{
		OutputState: o.OutputState,
	}
}

func (o NetAttributesOutput) DhcpOptionsSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetAttributes) pulumi.StringOutput { return v.DhcpOptionsSetId }).(pulumi.StringOutput)
}

func (o NetAttributesOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v *NetAttributes) pulumi.StringOutput { return v.IpRange }).(pulumi.StringOutput)
}

func (o NetAttributesOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetAttributes) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o NetAttributesOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetAttributes) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o NetAttributesOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NetAttributes) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o NetAttributesOutput) Tags() NetAttributesTagArrayOutput {
	return o.ApplyT(func(v *NetAttributes) NetAttributesTagArrayOutput { return v.Tags }).(NetAttributesTagArrayOutput)
}

func (o NetAttributesOutput) Tenancy() pulumi.StringOutput {
	return o.ApplyT(func(v *NetAttributes) pulumi.StringOutput { return v.Tenancy }).(pulumi.StringOutput)
}

type NetAttributesArrayOutput struct{ *pulumi.OutputState }

func (NetAttributesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetAttributes)(nil)).Elem()
}

func (o NetAttributesArrayOutput) ToNetAttributesArrayOutput() NetAttributesArrayOutput {
	return o
}

func (o NetAttributesArrayOutput) ToNetAttributesArrayOutputWithContext(ctx context.Context) NetAttributesArrayOutput {
	return o
}

func (o NetAttributesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*NetAttributes] {
	return pulumix.Output[[]*NetAttributes]{
		OutputState: o.OutputState,
	}
}

func (o NetAttributesArrayOutput) Index(i pulumi.IntInput) NetAttributesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetAttributes {
		return vs[0].([]*NetAttributes)[vs[1].(int)]
	}).(NetAttributesOutput)
}

type NetAttributesMapOutput struct{ *pulumi.OutputState }

func (NetAttributesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetAttributes)(nil)).Elem()
}

func (o NetAttributesMapOutput) ToNetAttributesMapOutput() NetAttributesMapOutput {
	return o
}

func (o NetAttributesMapOutput) ToNetAttributesMapOutputWithContext(ctx context.Context) NetAttributesMapOutput {
	return o
}

func (o NetAttributesMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*NetAttributes] {
	return pulumix.Output[map[string]*NetAttributes]{
		OutputState: o.OutputState,
	}
}

func (o NetAttributesMapOutput) MapIndex(k pulumi.StringInput) NetAttributesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetAttributes {
		return vs[0].(map[string]*NetAttributes)[vs[1].(string)]
	}).(NetAttributesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetAttributesInput)(nil)).Elem(), &NetAttributes{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetAttributesArrayInput)(nil)).Elem(), NetAttributesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetAttributesMapInput)(nil)).Elem(), NetAttributesMap{})
	pulumi.RegisterOutputType(NetAttributesOutput{})
	pulumi.RegisterOutputType(NetAttributesArrayOutput{})
	pulumi.RegisterOutputType(NetAttributesMapOutput{})
}
