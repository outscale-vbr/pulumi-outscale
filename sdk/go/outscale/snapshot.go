// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Snapshot struct {
	pulumi.CustomResourceState

	AccountAlias               pulumi.StringOutput                          `pulumi:"accountAlias"`
	AccountId                  pulumi.StringOutput                          `pulumi:"accountId"`
	CreationDate               pulumi.StringOutput                          `pulumi:"creationDate"`
	Description                pulumi.StringOutput                          `pulumi:"description"`
	FileLocation               pulumi.StringOutput                          `pulumi:"fileLocation"`
	PermissionsToCreateVolumes SnapshotPermissionsToCreateVolumeArrayOutput `pulumi:"permissionsToCreateVolumes"`
	Progress                   pulumi.IntOutput                             `pulumi:"progress"`
	RequestId                  pulumi.StringOutput                          `pulumi:"requestId"`
	SnapshotId                 pulumi.StringOutput                          `pulumi:"snapshotId"`
	SnapshotSize               pulumi.IntOutput                             `pulumi:"snapshotSize"`
	SourceRegionName           pulumi.StringOutput                          `pulumi:"sourceRegionName"`
	SourceSnapshotId           pulumi.StringOutput                          `pulumi:"sourceSnapshotId"`
	State                      pulumi.StringOutput                          `pulumi:"state"`
	Tags                       SnapshotTagArrayOutput                       `pulumi:"tags"`
	VolumeId                   pulumi.StringOutput                          `pulumi:"volumeId"`
	VolumeSize                 pulumi.IntOutput                             `pulumi:"volumeSize"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		args = &SnapshotArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("outscale:index/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("outscale:index/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	AccountAlias               *string                             `pulumi:"accountAlias"`
	AccountId                  *string                             `pulumi:"accountId"`
	CreationDate               *string                             `pulumi:"creationDate"`
	Description                *string                             `pulumi:"description"`
	FileLocation               *string                             `pulumi:"fileLocation"`
	PermissionsToCreateVolumes []SnapshotPermissionsToCreateVolume `pulumi:"permissionsToCreateVolumes"`
	Progress                   *int                                `pulumi:"progress"`
	RequestId                  *string                             `pulumi:"requestId"`
	SnapshotId                 *string                             `pulumi:"snapshotId"`
	SnapshotSize               *int                                `pulumi:"snapshotSize"`
	SourceRegionName           *string                             `pulumi:"sourceRegionName"`
	SourceSnapshotId           *string                             `pulumi:"sourceSnapshotId"`
	State                      *string                             `pulumi:"state"`
	Tags                       []SnapshotTag                       `pulumi:"tags"`
	VolumeId                   *string                             `pulumi:"volumeId"`
	VolumeSize                 *int                                `pulumi:"volumeSize"`
}

type SnapshotState struct {
	AccountAlias               pulumi.StringPtrInput
	AccountId                  pulumi.StringPtrInput
	CreationDate               pulumi.StringPtrInput
	Description                pulumi.StringPtrInput
	FileLocation               pulumi.StringPtrInput
	PermissionsToCreateVolumes SnapshotPermissionsToCreateVolumeArrayInput
	Progress                   pulumi.IntPtrInput
	RequestId                  pulumi.StringPtrInput
	SnapshotId                 pulumi.StringPtrInput
	SnapshotSize               pulumi.IntPtrInput
	SourceRegionName           pulumi.StringPtrInput
	SourceSnapshotId           pulumi.StringPtrInput
	State                      pulumi.StringPtrInput
	Tags                       SnapshotTagArrayInput
	VolumeId                   pulumi.StringPtrInput
	VolumeSize                 pulumi.IntPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	Description      *string       `pulumi:"description"`
	FileLocation     *string       `pulumi:"fileLocation"`
	SnapshotSize     *int          `pulumi:"snapshotSize"`
	SourceRegionName *string       `pulumi:"sourceRegionName"`
	SourceSnapshotId *string       `pulumi:"sourceSnapshotId"`
	Tags             []SnapshotTag `pulumi:"tags"`
	VolumeId         *string       `pulumi:"volumeId"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	Description      pulumi.StringPtrInput
	FileLocation     pulumi.StringPtrInput
	SnapshotSize     pulumi.IntPtrInput
	SourceRegionName pulumi.StringPtrInput
	SourceSnapshotId pulumi.StringPtrInput
	Tags             SnapshotTagArrayInput
	VolumeId         pulumi.StringPtrInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

func (i *Snapshot) ToOutput(ctx context.Context) pulumix.Output[*Snapshot] {
	return pulumix.Output[*Snapshot]{
		OutputState: i.ToSnapshotOutputWithContext(ctx).OutputState,
	}
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

func (i SnapshotArray) ToOutput(ctx context.Context) pulumix.Output[[]*Snapshot] {
	return pulumix.Output[[]*Snapshot]{
		OutputState: i.ToSnapshotArrayOutputWithContext(ctx).OutputState,
	}
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

func (i SnapshotMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Snapshot] {
	return pulumix.Output[map[string]*Snapshot]{
		OutputState: i.ToSnapshotMapOutputWithContext(ctx).OutputState,
	}
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToOutput(ctx context.Context) pulumix.Output[*Snapshot] {
	return pulumix.Output[*Snapshot]{
		OutputState: o.OutputState,
	}
}

func (o SnapshotOutput) AccountAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.AccountAlias }).(pulumi.StringOutput)
}

func (o SnapshotOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o SnapshotOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SnapshotOutput) FileLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.FileLocation }).(pulumi.StringOutput)
}

func (o SnapshotOutput) PermissionsToCreateVolumes() SnapshotPermissionsToCreateVolumeArrayOutput {
	return o.ApplyT(func(v *Snapshot) SnapshotPermissionsToCreateVolumeArrayOutput { return v.PermissionsToCreateVolumes }).(SnapshotPermissionsToCreateVolumeArrayOutput)
}

func (o SnapshotOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Progress }).(pulumi.IntOutput)
}

func (o SnapshotOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o SnapshotOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

func (o SnapshotOutput) SnapshotSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.SnapshotSize }).(pulumi.IntOutput)
}

func (o SnapshotOutput) SourceRegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SourceRegionName }).(pulumi.StringOutput)
}

func (o SnapshotOutput) SourceSnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SourceSnapshotId }).(pulumi.StringOutput)
}

func (o SnapshotOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Tags() SnapshotTagArrayOutput {
	return o.ApplyT(func(v *Snapshot) SnapshotTagArrayOutput { return v.Tags }).(SnapshotTagArrayOutput)
}

func (o SnapshotOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

func (o SnapshotOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.VolumeSize }).(pulumi.IntOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Snapshot] {
	return pulumix.Output[[]*Snapshot]{
		OutputState: o.OutputState,
	}
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Snapshot] {
	return pulumix.Output[map[string]*Snapshot]{
		OutputState: o.OutputState,
	}
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}
