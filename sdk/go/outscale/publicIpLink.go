// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type PublicIpLink struct {
	pulumi.CustomResourceState

	AllowRelink    pulumi.BoolPtrOutput       `pulumi:"allowRelink"`
	LinkPublicIpId pulumi.StringOutput        `pulumi:"linkPublicIpId"`
	NicAccountId   pulumi.StringOutput        `pulumi:"nicAccountId"`
	NicId          pulumi.StringOutput        `pulumi:"nicId"`
	PrivateIp      pulumi.StringOutput        `pulumi:"privateIp"`
	PublicIp       pulumi.StringOutput        `pulumi:"publicIp"`
	PublicIpId     pulumi.StringOutput        `pulumi:"publicIpId"`
	RequestId      pulumi.StringOutput        `pulumi:"requestId"`
	Tags           PublicIpLinkTagArrayOutput `pulumi:"tags"`
	VmId           pulumi.StringOutput        `pulumi:"vmId"`
}

// NewPublicIpLink registers a new resource with the given unique name, arguments, and options.
func NewPublicIpLink(ctx *pulumi.Context,
	name string, args *PublicIpLinkArgs, opts ...pulumi.ResourceOption) (*PublicIpLink, error) {
	if args == nil {
		args = &PublicIpLinkArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicIpLink
	err := ctx.RegisterResource("outscale:index/publicIpLink:PublicIpLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicIpLink gets an existing PublicIpLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicIpLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicIpLinkState, opts ...pulumi.ResourceOption) (*PublicIpLink, error) {
	var resource PublicIpLink
	err := ctx.ReadResource("outscale:index/publicIpLink:PublicIpLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicIpLink resources.
type publicIpLinkState struct {
	AllowRelink    *bool             `pulumi:"allowRelink"`
	LinkPublicIpId *string           `pulumi:"linkPublicIpId"`
	NicAccountId   *string           `pulumi:"nicAccountId"`
	NicId          *string           `pulumi:"nicId"`
	PrivateIp      *string           `pulumi:"privateIp"`
	PublicIp       *string           `pulumi:"publicIp"`
	PublicIpId     *string           `pulumi:"publicIpId"`
	RequestId      *string           `pulumi:"requestId"`
	Tags           []PublicIpLinkTag `pulumi:"tags"`
	VmId           *string           `pulumi:"vmId"`
}

type PublicIpLinkState struct {
	AllowRelink    pulumi.BoolPtrInput
	LinkPublicIpId pulumi.StringPtrInput
	NicAccountId   pulumi.StringPtrInput
	NicId          pulumi.StringPtrInput
	PrivateIp      pulumi.StringPtrInput
	PublicIp       pulumi.StringPtrInput
	PublicIpId     pulumi.StringPtrInput
	RequestId      pulumi.StringPtrInput
	Tags           PublicIpLinkTagArrayInput
	VmId           pulumi.StringPtrInput
}

func (PublicIpLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpLinkState)(nil)).Elem()
}

type publicIpLinkArgs struct {
	AllowRelink *bool   `pulumi:"allowRelink"`
	NicId       *string `pulumi:"nicId"`
	PrivateIp   *string `pulumi:"privateIp"`
	PublicIp    *string `pulumi:"publicIp"`
	PublicIpId  *string `pulumi:"publicIpId"`
	VmId        *string `pulumi:"vmId"`
}

// The set of arguments for constructing a PublicIpLink resource.
type PublicIpLinkArgs struct {
	AllowRelink pulumi.BoolPtrInput
	NicId       pulumi.StringPtrInput
	PrivateIp   pulumi.StringPtrInput
	PublicIp    pulumi.StringPtrInput
	PublicIpId  pulumi.StringPtrInput
	VmId        pulumi.StringPtrInput
}

func (PublicIpLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpLinkArgs)(nil)).Elem()
}

type PublicIpLinkInput interface {
	pulumi.Input

	ToPublicIpLinkOutput() PublicIpLinkOutput
	ToPublicIpLinkOutputWithContext(ctx context.Context) PublicIpLinkOutput
}

func (*PublicIpLink) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIpLink)(nil)).Elem()
}

func (i *PublicIpLink) ToPublicIpLinkOutput() PublicIpLinkOutput {
	return i.ToPublicIpLinkOutputWithContext(context.Background())
}

func (i *PublicIpLink) ToPublicIpLinkOutputWithContext(ctx context.Context) PublicIpLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpLinkOutput)
}

func (i *PublicIpLink) ToOutput(ctx context.Context) pulumix.Output[*PublicIpLink] {
	return pulumix.Output[*PublicIpLink]{
		OutputState: i.ToPublicIpLinkOutputWithContext(ctx).OutputState,
	}
}

// PublicIpLinkArrayInput is an input type that accepts PublicIpLinkArray and PublicIpLinkArrayOutput values.
// You can construct a concrete instance of `PublicIpLinkArrayInput` via:
//
//	PublicIpLinkArray{ PublicIpLinkArgs{...} }
type PublicIpLinkArrayInput interface {
	pulumi.Input

	ToPublicIpLinkArrayOutput() PublicIpLinkArrayOutput
	ToPublicIpLinkArrayOutputWithContext(context.Context) PublicIpLinkArrayOutput
}

type PublicIpLinkArray []PublicIpLinkInput

func (PublicIpLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIpLink)(nil)).Elem()
}

func (i PublicIpLinkArray) ToPublicIpLinkArrayOutput() PublicIpLinkArrayOutput {
	return i.ToPublicIpLinkArrayOutputWithContext(context.Background())
}

func (i PublicIpLinkArray) ToPublicIpLinkArrayOutputWithContext(ctx context.Context) PublicIpLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpLinkArrayOutput)
}

func (i PublicIpLinkArray) ToOutput(ctx context.Context) pulumix.Output[[]*PublicIpLink] {
	return pulumix.Output[[]*PublicIpLink]{
		OutputState: i.ToPublicIpLinkArrayOutputWithContext(ctx).OutputState,
	}
}

// PublicIpLinkMapInput is an input type that accepts PublicIpLinkMap and PublicIpLinkMapOutput values.
// You can construct a concrete instance of `PublicIpLinkMapInput` via:
//
//	PublicIpLinkMap{ "key": PublicIpLinkArgs{...} }
type PublicIpLinkMapInput interface {
	pulumi.Input

	ToPublicIpLinkMapOutput() PublicIpLinkMapOutput
	ToPublicIpLinkMapOutputWithContext(context.Context) PublicIpLinkMapOutput
}

type PublicIpLinkMap map[string]PublicIpLinkInput

func (PublicIpLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIpLink)(nil)).Elem()
}

func (i PublicIpLinkMap) ToPublicIpLinkMapOutput() PublicIpLinkMapOutput {
	return i.ToPublicIpLinkMapOutputWithContext(context.Background())
}

func (i PublicIpLinkMap) ToPublicIpLinkMapOutputWithContext(ctx context.Context) PublicIpLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpLinkMapOutput)
}

func (i PublicIpLinkMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PublicIpLink] {
	return pulumix.Output[map[string]*PublicIpLink]{
		OutputState: i.ToPublicIpLinkMapOutputWithContext(ctx).OutputState,
	}
}

type PublicIpLinkOutput struct{ *pulumi.OutputState }

func (PublicIpLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIpLink)(nil)).Elem()
}

func (o PublicIpLinkOutput) ToPublicIpLinkOutput() PublicIpLinkOutput {
	return o
}

func (o PublicIpLinkOutput) ToPublicIpLinkOutputWithContext(ctx context.Context) PublicIpLinkOutput {
	return o
}

func (o PublicIpLinkOutput) ToOutput(ctx context.Context) pulumix.Output[*PublicIpLink] {
	return pulumix.Output[*PublicIpLink]{
		OutputState: o.OutputState,
	}
}

func (o PublicIpLinkOutput) AllowRelink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.BoolPtrOutput { return v.AllowRelink }).(pulumi.BoolPtrOutput)
}

func (o PublicIpLinkOutput) LinkPublicIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.LinkPublicIpId }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) NicAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.NicAccountId }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) NicId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.NicId }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) PublicIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.PublicIpId }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) Tags() PublicIpLinkTagArrayOutput {
	return o.ApplyT(func(v *PublicIpLink) PublicIpLinkTagArrayOutput { return v.Tags }).(PublicIpLinkTagArrayOutput)
}

func (o PublicIpLinkOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

type PublicIpLinkArrayOutput struct{ *pulumi.OutputState }

func (PublicIpLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIpLink)(nil)).Elem()
}

func (o PublicIpLinkArrayOutput) ToPublicIpLinkArrayOutput() PublicIpLinkArrayOutput {
	return o
}

func (o PublicIpLinkArrayOutput) ToPublicIpLinkArrayOutputWithContext(ctx context.Context) PublicIpLinkArrayOutput {
	return o
}

func (o PublicIpLinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PublicIpLink] {
	return pulumix.Output[[]*PublicIpLink]{
		OutputState: o.OutputState,
	}
}

func (o PublicIpLinkArrayOutput) Index(i pulumi.IntInput) PublicIpLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicIpLink {
		return vs[0].([]*PublicIpLink)[vs[1].(int)]
	}).(PublicIpLinkOutput)
}

type PublicIpLinkMapOutput struct{ *pulumi.OutputState }

func (PublicIpLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIpLink)(nil)).Elem()
}

func (o PublicIpLinkMapOutput) ToPublicIpLinkMapOutput() PublicIpLinkMapOutput {
	return o
}

func (o PublicIpLinkMapOutput) ToPublicIpLinkMapOutputWithContext(ctx context.Context) PublicIpLinkMapOutput {
	return o
}

func (o PublicIpLinkMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PublicIpLink] {
	return pulumix.Output[map[string]*PublicIpLink]{
		OutputState: o.OutputState,
	}
}

func (o PublicIpLinkMapOutput) MapIndex(k pulumi.StringInput) PublicIpLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicIpLink {
		return vs[0].(map[string]*PublicIpLink)[vs[1].(string)]
	}).(PublicIpLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpLinkInput)(nil)).Elem(), &PublicIpLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpLinkArrayInput)(nil)).Elem(), PublicIpLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpLinkMapInput)(nil)).Elem(), PublicIpLinkMap{})
	pulumi.RegisterOutputType(PublicIpLinkOutput{})
	pulumi.RegisterOutputType(PublicIpLinkArrayOutput{})
	pulumi.RegisterOutputType(PublicIpLinkMapOutput{})
}
