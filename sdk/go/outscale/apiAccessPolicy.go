// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type ApiAccessPolicy struct {
	pulumi.CustomResourceState

	MaxAccessKeyExpirationSeconds pulumi.IntOutput    `pulumi:"maxAccessKeyExpirationSeconds"`
	RequestId                     pulumi.StringOutput `pulumi:"requestId"`
	RequireTrustedEnv             pulumi.BoolOutput   `pulumi:"requireTrustedEnv"`
}

// NewApiAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewApiAccessPolicy(ctx *pulumi.Context,
	name string, args *ApiAccessPolicyArgs, opts ...pulumi.ResourceOption) (*ApiAccessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxAccessKeyExpirationSeconds == nil {
		return nil, errors.New("invalid value for required argument 'MaxAccessKeyExpirationSeconds'")
	}
	if args.RequireTrustedEnv == nil {
		return nil, errors.New("invalid value for required argument 'RequireTrustedEnv'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiAccessPolicy
	err := ctx.RegisterResource("outscale:index/apiAccessPolicy:ApiAccessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiAccessPolicy gets an existing ApiAccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiAccessPolicyState, opts ...pulumi.ResourceOption) (*ApiAccessPolicy, error) {
	var resource ApiAccessPolicy
	err := ctx.ReadResource("outscale:index/apiAccessPolicy:ApiAccessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiAccessPolicy resources.
type apiAccessPolicyState struct {
	MaxAccessKeyExpirationSeconds *int    `pulumi:"maxAccessKeyExpirationSeconds"`
	RequestId                     *string `pulumi:"requestId"`
	RequireTrustedEnv             *bool   `pulumi:"requireTrustedEnv"`
}

type ApiAccessPolicyState struct {
	MaxAccessKeyExpirationSeconds pulumi.IntPtrInput
	RequestId                     pulumi.StringPtrInput
	RequireTrustedEnv             pulumi.BoolPtrInput
}

func (ApiAccessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiAccessPolicyState)(nil)).Elem()
}

type apiAccessPolicyArgs struct {
	MaxAccessKeyExpirationSeconds int  `pulumi:"maxAccessKeyExpirationSeconds"`
	RequireTrustedEnv             bool `pulumi:"requireTrustedEnv"`
}

// The set of arguments for constructing a ApiAccessPolicy resource.
type ApiAccessPolicyArgs struct {
	MaxAccessKeyExpirationSeconds pulumi.IntInput
	RequireTrustedEnv             pulumi.BoolInput
}

func (ApiAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiAccessPolicyArgs)(nil)).Elem()
}

type ApiAccessPolicyInput interface {
	pulumi.Input

	ToApiAccessPolicyOutput() ApiAccessPolicyOutput
	ToApiAccessPolicyOutputWithContext(ctx context.Context) ApiAccessPolicyOutput
}

func (*ApiAccessPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiAccessPolicy)(nil)).Elem()
}

func (i *ApiAccessPolicy) ToApiAccessPolicyOutput() ApiAccessPolicyOutput {
	return i.ToApiAccessPolicyOutputWithContext(context.Background())
}

func (i *ApiAccessPolicy) ToApiAccessPolicyOutputWithContext(ctx context.Context) ApiAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiAccessPolicyOutput)
}

func (i *ApiAccessPolicy) ToOutput(ctx context.Context) pulumix.Output[*ApiAccessPolicy] {
	return pulumix.Output[*ApiAccessPolicy]{
		OutputState: i.ToApiAccessPolicyOutputWithContext(ctx).OutputState,
	}
}

// ApiAccessPolicyArrayInput is an input type that accepts ApiAccessPolicyArray and ApiAccessPolicyArrayOutput values.
// You can construct a concrete instance of `ApiAccessPolicyArrayInput` via:
//
//	ApiAccessPolicyArray{ ApiAccessPolicyArgs{...} }
type ApiAccessPolicyArrayInput interface {
	pulumi.Input

	ToApiAccessPolicyArrayOutput() ApiAccessPolicyArrayOutput
	ToApiAccessPolicyArrayOutputWithContext(context.Context) ApiAccessPolicyArrayOutput
}

type ApiAccessPolicyArray []ApiAccessPolicyInput

func (ApiAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiAccessPolicy)(nil)).Elem()
}

func (i ApiAccessPolicyArray) ToApiAccessPolicyArrayOutput() ApiAccessPolicyArrayOutput {
	return i.ToApiAccessPolicyArrayOutputWithContext(context.Background())
}

func (i ApiAccessPolicyArray) ToApiAccessPolicyArrayOutputWithContext(ctx context.Context) ApiAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiAccessPolicyArrayOutput)
}

func (i ApiAccessPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]*ApiAccessPolicy] {
	return pulumix.Output[[]*ApiAccessPolicy]{
		OutputState: i.ToApiAccessPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

// ApiAccessPolicyMapInput is an input type that accepts ApiAccessPolicyMap and ApiAccessPolicyMapOutput values.
// You can construct a concrete instance of `ApiAccessPolicyMapInput` via:
//
//	ApiAccessPolicyMap{ "key": ApiAccessPolicyArgs{...} }
type ApiAccessPolicyMapInput interface {
	pulumi.Input

	ToApiAccessPolicyMapOutput() ApiAccessPolicyMapOutput
	ToApiAccessPolicyMapOutputWithContext(context.Context) ApiAccessPolicyMapOutput
}

type ApiAccessPolicyMap map[string]ApiAccessPolicyInput

func (ApiAccessPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiAccessPolicy)(nil)).Elem()
}

func (i ApiAccessPolicyMap) ToApiAccessPolicyMapOutput() ApiAccessPolicyMapOutput {
	return i.ToApiAccessPolicyMapOutputWithContext(context.Background())
}

func (i ApiAccessPolicyMap) ToApiAccessPolicyMapOutputWithContext(ctx context.Context) ApiAccessPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiAccessPolicyMapOutput)
}

func (i ApiAccessPolicyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ApiAccessPolicy] {
	return pulumix.Output[map[string]*ApiAccessPolicy]{
		OutputState: i.ToApiAccessPolicyMapOutputWithContext(ctx).OutputState,
	}
}

type ApiAccessPolicyOutput struct{ *pulumi.OutputState }

func (ApiAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiAccessPolicy)(nil)).Elem()
}

func (o ApiAccessPolicyOutput) ToApiAccessPolicyOutput() ApiAccessPolicyOutput {
	return o
}

func (o ApiAccessPolicyOutput) ToApiAccessPolicyOutputWithContext(ctx context.Context) ApiAccessPolicyOutput {
	return o
}

func (o ApiAccessPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[*ApiAccessPolicy] {
	return pulumix.Output[*ApiAccessPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ApiAccessPolicyOutput) MaxAccessKeyExpirationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *ApiAccessPolicy) pulumi.IntOutput { return v.MaxAccessKeyExpirationSeconds }).(pulumi.IntOutput)
}

func (o ApiAccessPolicyOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiAccessPolicy) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o ApiAccessPolicyOutput) RequireTrustedEnv() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApiAccessPolicy) pulumi.BoolOutput { return v.RequireTrustedEnv }).(pulumi.BoolOutput)
}

type ApiAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApiAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiAccessPolicy)(nil)).Elem()
}

func (o ApiAccessPolicyArrayOutput) ToApiAccessPolicyArrayOutput() ApiAccessPolicyArrayOutput {
	return o
}

func (o ApiAccessPolicyArrayOutput) ToApiAccessPolicyArrayOutputWithContext(ctx context.Context) ApiAccessPolicyArrayOutput {
	return o
}

func (o ApiAccessPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ApiAccessPolicy] {
	return pulumix.Output[[]*ApiAccessPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ApiAccessPolicyArrayOutput) Index(i pulumi.IntInput) ApiAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiAccessPolicy {
		return vs[0].([]*ApiAccessPolicy)[vs[1].(int)]
	}).(ApiAccessPolicyOutput)
}

type ApiAccessPolicyMapOutput struct{ *pulumi.OutputState }

func (ApiAccessPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiAccessPolicy)(nil)).Elem()
}

func (o ApiAccessPolicyMapOutput) ToApiAccessPolicyMapOutput() ApiAccessPolicyMapOutput {
	return o
}

func (o ApiAccessPolicyMapOutput) ToApiAccessPolicyMapOutputWithContext(ctx context.Context) ApiAccessPolicyMapOutput {
	return o
}

func (o ApiAccessPolicyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ApiAccessPolicy] {
	return pulumix.Output[map[string]*ApiAccessPolicy]{
		OutputState: o.OutputState,
	}
}

func (o ApiAccessPolicyMapOutput) MapIndex(k pulumi.StringInput) ApiAccessPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiAccessPolicy {
		return vs[0].(map[string]*ApiAccessPolicy)[vs[1].(string)]
	}).(ApiAccessPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiAccessPolicyInput)(nil)).Elem(), &ApiAccessPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiAccessPolicyArrayInput)(nil)).Elem(), ApiAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiAccessPolicyMapInput)(nil)).Elem(), ApiAccessPolicyMap{})
	pulumi.RegisterOutputType(ApiAccessPolicyOutput{})
	pulumi.RegisterOutputType(ApiAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApiAccessPolicyMapOutput{})
}
