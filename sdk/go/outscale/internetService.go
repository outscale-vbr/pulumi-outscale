// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale-vbr/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type InternetService struct {
	pulumi.CustomResourceState

	InternetServiceId pulumi.StringOutput           `pulumi:"internetServiceId"`
	NetId             pulumi.StringOutput           `pulumi:"netId"`
	RequestId         pulumi.StringOutput           `pulumi:"requestId"`
	State             pulumi.StringOutput           `pulumi:"state"`
	Tags              InternetServiceTagArrayOutput `pulumi:"tags"`
}

// NewInternetService registers a new resource with the given unique name, arguments, and options.
func NewInternetService(ctx *pulumi.Context,
	name string, args *InternetServiceArgs, opts ...pulumi.ResourceOption) (*InternetService, error) {
	if args == nil {
		args = &InternetServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InternetService
	err := ctx.RegisterResource("outscale:index/internetService:InternetService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInternetService gets an existing InternetService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInternetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InternetServiceState, opts ...pulumi.ResourceOption) (*InternetService, error) {
	var resource InternetService
	err := ctx.ReadResource("outscale:index/internetService:InternetService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InternetService resources.
type internetServiceState struct {
	InternetServiceId *string              `pulumi:"internetServiceId"`
	NetId             *string              `pulumi:"netId"`
	RequestId         *string              `pulumi:"requestId"`
	State             *string              `pulumi:"state"`
	Tags              []InternetServiceTag `pulumi:"tags"`
}

type InternetServiceState struct {
	InternetServiceId pulumi.StringPtrInput
	NetId             pulumi.StringPtrInput
	RequestId         pulumi.StringPtrInput
	State             pulumi.StringPtrInput
	Tags              InternetServiceTagArrayInput
}

func (InternetServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*internetServiceState)(nil)).Elem()
}

type internetServiceArgs struct {
	Tags []InternetServiceTag `pulumi:"tags"`
}

// The set of arguments for constructing a InternetService resource.
type InternetServiceArgs struct {
	Tags InternetServiceTagArrayInput
}

func (InternetServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*internetServiceArgs)(nil)).Elem()
}

type InternetServiceInput interface {
	pulumi.Input

	ToInternetServiceOutput() InternetServiceOutput
	ToInternetServiceOutputWithContext(ctx context.Context) InternetServiceOutput
}

func (*InternetService) ElementType() reflect.Type {
	return reflect.TypeOf((**InternetService)(nil)).Elem()
}

func (i *InternetService) ToInternetServiceOutput() InternetServiceOutput {
	return i.ToInternetServiceOutputWithContext(context.Background())
}

func (i *InternetService) ToInternetServiceOutputWithContext(ctx context.Context) InternetServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetServiceOutput)
}

func (i *InternetService) ToOutput(ctx context.Context) pulumix.Output[*InternetService] {
	return pulumix.Output[*InternetService]{
		OutputState: i.ToInternetServiceOutputWithContext(ctx).OutputState,
	}
}

// InternetServiceArrayInput is an input type that accepts InternetServiceArray and InternetServiceArrayOutput values.
// You can construct a concrete instance of `InternetServiceArrayInput` via:
//
//	InternetServiceArray{ InternetServiceArgs{...} }
type InternetServiceArrayInput interface {
	pulumi.Input

	ToInternetServiceArrayOutput() InternetServiceArrayOutput
	ToInternetServiceArrayOutputWithContext(context.Context) InternetServiceArrayOutput
}

type InternetServiceArray []InternetServiceInput

func (InternetServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternetService)(nil)).Elem()
}

func (i InternetServiceArray) ToInternetServiceArrayOutput() InternetServiceArrayOutput {
	return i.ToInternetServiceArrayOutputWithContext(context.Background())
}

func (i InternetServiceArray) ToInternetServiceArrayOutputWithContext(ctx context.Context) InternetServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetServiceArrayOutput)
}

func (i InternetServiceArray) ToOutput(ctx context.Context) pulumix.Output[[]*InternetService] {
	return pulumix.Output[[]*InternetService]{
		OutputState: i.ToInternetServiceArrayOutputWithContext(ctx).OutputState,
	}
}

// InternetServiceMapInput is an input type that accepts InternetServiceMap and InternetServiceMapOutput values.
// You can construct a concrete instance of `InternetServiceMapInput` via:
//
//	InternetServiceMap{ "key": InternetServiceArgs{...} }
type InternetServiceMapInput interface {
	pulumi.Input

	ToInternetServiceMapOutput() InternetServiceMapOutput
	ToInternetServiceMapOutputWithContext(context.Context) InternetServiceMapOutput
}

type InternetServiceMap map[string]InternetServiceInput

func (InternetServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternetService)(nil)).Elem()
}

func (i InternetServiceMap) ToInternetServiceMapOutput() InternetServiceMapOutput {
	return i.ToInternetServiceMapOutputWithContext(context.Background())
}

func (i InternetServiceMap) ToInternetServiceMapOutputWithContext(ctx context.Context) InternetServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetServiceMapOutput)
}

func (i InternetServiceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InternetService] {
	return pulumix.Output[map[string]*InternetService]{
		OutputState: i.ToInternetServiceMapOutputWithContext(ctx).OutputState,
	}
}

type InternetServiceOutput struct{ *pulumi.OutputState }

func (InternetServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternetService)(nil)).Elem()
}

func (o InternetServiceOutput) ToInternetServiceOutput() InternetServiceOutput {
	return o
}

func (o InternetServiceOutput) ToInternetServiceOutputWithContext(ctx context.Context) InternetServiceOutput {
	return o
}

func (o InternetServiceOutput) ToOutput(ctx context.Context) pulumix.Output[*InternetService] {
	return pulumix.Output[*InternetService]{
		OutputState: o.OutputState,
	}
}

func (o InternetServiceOutput) InternetServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetService) pulumi.StringOutput { return v.InternetServiceId }).(pulumi.StringOutput)
}

func (o InternetServiceOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetService) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o InternetServiceOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetService) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o InternetServiceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetService) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o InternetServiceOutput) Tags() InternetServiceTagArrayOutput {
	return o.ApplyT(func(v *InternetService) InternetServiceTagArrayOutput { return v.Tags }).(InternetServiceTagArrayOutput)
}

type InternetServiceArrayOutput struct{ *pulumi.OutputState }

func (InternetServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternetService)(nil)).Elem()
}

func (o InternetServiceArrayOutput) ToInternetServiceArrayOutput() InternetServiceArrayOutput {
	return o
}

func (o InternetServiceArrayOutput) ToInternetServiceArrayOutputWithContext(ctx context.Context) InternetServiceArrayOutput {
	return o
}

func (o InternetServiceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InternetService] {
	return pulumix.Output[[]*InternetService]{
		OutputState: o.OutputState,
	}
}

func (o InternetServiceArrayOutput) Index(i pulumi.IntInput) InternetServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InternetService {
		return vs[0].([]*InternetService)[vs[1].(int)]
	}).(InternetServiceOutput)
}

type InternetServiceMapOutput struct{ *pulumi.OutputState }

func (InternetServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternetService)(nil)).Elem()
}

func (o InternetServiceMapOutput) ToInternetServiceMapOutput() InternetServiceMapOutput {
	return o
}

func (o InternetServiceMapOutput) ToInternetServiceMapOutputWithContext(ctx context.Context) InternetServiceMapOutput {
	return o
}

func (o InternetServiceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InternetService] {
	return pulumix.Output[map[string]*InternetService]{
		OutputState: o.OutputState,
	}
}

func (o InternetServiceMapOutput) MapIndex(k pulumi.StringInput) InternetServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InternetService {
		return vs[0].(map[string]*InternetService)[vs[1].(string)]
	}).(InternetServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InternetServiceInput)(nil)).Elem(), &InternetService{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetServiceArrayInput)(nil)).Elem(), InternetServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetServiceMapInput)(nil)).Elem(), InternetServiceMap{})
	pulumi.RegisterOutputType(InternetServiceOutput{})
	pulumi.RegisterOutputType(InternetServiceArrayOutput{})
	pulumi.RegisterOutputType(InternetServiceMapOutput{})
}
